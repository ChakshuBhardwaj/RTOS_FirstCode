
FreeRtos_FirstCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000520c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005498  08005498  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080054a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e24  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e9c  20012e9c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f381  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f2  00000000  00000000  0002f429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e10  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025691  00000000  00000000  00033868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010916  00000000  00000000  00058ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2280  00000000  00000000  0006980f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ba8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004584  00000000  00000000  0014bae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080053a4 	.word	0x080053a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080053a4 	.word	0x080053a4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fcf1 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f845 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8af 	bl	8000664 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
Is_Created =  xTaskCreate(Task1_Handler,"Task-11",200,"Hello World from Task-1",2,&Task1_handle);
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <main+0x80>)
 8000512:	22c8      	movs	r2, #200	; 0xc8
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <main+0x84>)
 8000516:	4819      	ldr	r0, [pc, #100]	; (800057c <main+0x88>)
 8000518:	f002 fc94 	bl	8002e44 <xTaskCreate>
 800051c:	6178      	str	r0, [r7, #20]
configASSERT(Is_Created == pdPASS);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00a      	beq.n	800053a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000528:	f383 8811 	msr	BASEPRI, r3
 800052c:	f3bf 8f6f 	isb	sy
 8000530:	f3bf 8f4f 	dsb	sy
 8000534:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000536:	bf00      	nop
 8000538:	e7fe      	b.n	8000538 <main+0x44>
Is_Created =  xTaskCreate(Task2_Handler,"Task-2",200,"Hello World from Task-2",2,&Task2_handle);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2302      	movs	r3, #2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0x8c>)
 8000544:	22c8      	movs	r2, #200	; 0xc8
 8000546:	490f      	ldr	r1, [pc, #60]	; (8000584 <main+0x90>)
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0x94>)
 800054a:	f002 fc7b 	bl	8002e44 <xTaskCreate>
 800054e:	6178      	str	r0, [r7, #20]
configASSERT(Is_Created == pdPASS);
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d00a      	beq.n	800056c <main+0x78>
        __asm volatile
 8000556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055a:	f383 8811 	msr	BASEPRI, r3
 800055e:	f3bf 8f6f 	isb	sy
 8000562:	f3bf 8f4f 	dsb	sy
 8000566:	60fb      	str	r3, [r7, #12]
    }
 8000568:	bf00      	nop
 800056a:	e7fe      	b.n	800056a <main+0x76>

vTaskStartScheduler();
 800056c:	f002 fda2 	bl	80030b4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x7c>
 8000572:	bf00      	nop
 8000574:	080053bc 	.word	0x080053bc
 8000578:	080053d4 	.word	0x080053d4
 800057c:	08000b3d 	.word	0x08000b3d
 8000580:	080053dc 	.word	0x080053dc
 8000584:	080053f4 	.word	0x080053f4
 8000588:	08000b61 	.word	0x08000b61

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 f9ee 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a28      	ldr	r2, [pc, #160]	; (800065c <SystemClock_Config+0xd0>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd4>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000604:	2332      	movs	r3, #50	; 0x32
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000608:	2304      	movs	r3, #4
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060c:	2307      	movs	r3, #7
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f000 ff4d 	bl	80014b4 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000620:	f000 fac2 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000630:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f9ae 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064e:	f000 faab 	bl	8000ba8 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08e      	sub	sp, #56	; 0x38
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
 800067e:	4bb2      	ldr	r3, [pc, #712]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4ab1      	ldr	r2, [pc, #708]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4baf      	ldr	r3, [pc, #700]	; (8000948 <MX_GPIO_Init+0x2e4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
 800069a:	4bab      	ldr	r3, [pc, #684]	; (8000948 <MX_GPIO_Init+0x2e4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4aaa      	ldr	r2, [pc, #680]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006a0:	f043 0320 	orr.w	r3, r3, #32
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4ba8      	ldr	r3, [pc, #672]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0320 	and.w	r3, r3, #32
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	4ba4      	ldr	r3, [pc, #656]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4aa3      	ldr	r2, [pc, #652]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4ba1      	ldr	r3, [pc, #644]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	4b9d      	ldr	r3, [pc, #628]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a9c      	ldr	r2, [pc, #624]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b9a      	ldr	r3, [pc, #616]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b96      	ldr	r3, [pc, #600]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a95      	ldr	r2, [pc, #596]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b93      	ldr	r3, [pc, #588]	; (8000948 <MX_GPIO_Init+0x2e4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b8f      	ldr	r3, [pc, #572]	; (8000948 <MX_GPIO_Init+0x2e4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a8e      	ldr	r2, [pc, #568]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b8c      	ldr	r3, [pc, #560]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b88      	ldr	r3, [pc, #544]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a87      	ldr	r2, [pc, #540]	; (8000948 <MX_GPIO_Init+0x2e4>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b85      	ldr	r3, [pc, #532]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b81      	ldr	r3, [pc, #516]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a80      	ldr	r2, [pc, #512]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b7e      	ldr	r3, [pc, #504]	; (8000948 <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2116      	movs	r1, #22
 800075e:	487b      	ldr	r0, [pc, #492]	; (800094c <MX_GPIO_Init+0x2e8>)
 8000760:	f000 fe8e 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4879      	ldr	r0, [pc, #484]	; (8000950 <MX_GPIO_Init+0x2ec>)
 800076a:	f000 fe89 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000774:	4877      	ldr	r0, [pc, #476]	; (8000954 <MX_GPIO_Init+0x2f0>)
 8000776:	f000 fe83 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000780:	4875      	ldr	r0, [pc, #468]	; (8000958 <MX_GPIO_Init+0x2f4>)
 8000782:	f000 fe7d 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000786:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000798:	230c      	movs	r3, #12
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	4619      	mov	r1, r3
 80007a2:	486e      	ldr	r0, [pc, #440]	; (800095c <MX_GPIO_Init+0x2f8>)
 80007a4:	f000 fcc0 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80007a8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007ba:	2305      	movs	r3, #5
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	4865      	ldr	r0, [pc, #404]	; (800095c <MX_GPIO_Init+0x2f8>)
 80007c6:	f000 fcaf 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80007ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007dc:	230e      	movs	r3, #14
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	485d      	ldr	r0, [pc, #372]	; (800095c <MX_GPIO_Init+0x2f8>)
 80007e8:	f000 fc9e 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007ec:	2301      	movs	r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007fc:	230c      	movs	r3, #12
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	4619      	mov	r1, r3
 8000806:	4851      	ldr	r0, [pc, #324]	; (800094c <MX_GPIO_Init+0x2e8>)
 8000808:	f000 fc8e 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800080c:	2316      	movs	r3, #22
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	484a      	ldr	r0, [pc, #296]	; (800094c <MX_GPIO_Init+0x2e8>)
 8000824:	f000 fc80 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000828:	f248 0307 	movw	r3, #32775	; 0x8007
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800082e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <MX_GPIO_Init+0x2ec>)
 8000840:	f000 fc72 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000844:	f641 0358 	movw	r3, #6232	; 0x1858
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000856:	230e      	movs	r3, #14
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	483b      	ldr	r0, [pc, #236]	; (8000950 <MX_GPIO_Init+0x2ec>)
 8000862:	f000 fc61 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4834      	ldr	r0, [pc, #208]	; (8000950 <MX_GPIO_Init+0x2ec>)
 800087e:	f000 fc53 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000886:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	482d      	ldr	r0, [pc, #180]	; (800094c <MX_GPIO_Init+0x2e8>)
 8000898:	f000 fc46 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800089c:	2303      	movs	r3, #3
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008ac:	2309      	movs	r3, #9
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x2fc>)
 80008b8:	f000 fc36 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4824      	ldr	r0, [pc, #144]	; (8000960 <MX_GPIO_Init+0x2fc>)
 80008d0:	f000 fc2a 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80008d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e6:	230c      	movs	r3, #12
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	4819      	ldr	r0, [pc, #100]	; (8000958 <MX_GPIO_Init+0x2f4>)
 80008f2:	f000 fc19 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80008f6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000908:	230c      	movs	r3, #12
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_GPIO_Init+0x300>)
 8000914:	f000 fc08 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000918:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800092a:	230e      	movs	r3, #14
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	480a      	ldr	r0, [pc, #40]	; (8000960 <MX_GPIO_Init+0x2fc>)
 8000936:	f000 fbf7 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800093a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
 8000944:	e010      	b.n	8000968 <MX_GPIO_Init+0x304>
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020800 	.word	0x40020800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020c00 	.word	0x40020c00
 8000958:	40021800 	.word	0x40021800
 800095c:	40021400 	.word	0x40021400
 8000960:	40020400 	.word	0x40020400
 8000964:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000970:	230c      	movs	r3, #12
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	486b      	ldr	r0, [pc, #428]	; (8000b28 <MX_GPIO_Init+0x4c4>)
 800097c:	f000 fbd4 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4864      	ldr	r0, [pc, #400]	; (8000b28 <MX_GPIO_Init+0x4c4>)
 8000996:	f000 fbc7 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800099a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ac:	230c      	movs	r3, #12
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	485d      	ldr	r0, [pc, #372]	; (8000b2c <MX_GPIO_Init+0x4c8>)
 80009b8:	f000 fbb6 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4856      	ldr	r0, [pc, #344]	; (8000b2c <MX_GPIO_Init+0x4c8>)
 80009d2:	f000 fba9 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	484f      	ldr	r0, [pc, #316]	; (8000b2c <MX_GPIO_Init+0x4c8>)
 80009f0:	f000 fb9a 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80009f4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a06:	230e      	movs	r3, #14
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4847      	ldr	r0, [pc, #284]	; (8000b30 <MX_GPIO_Init+0x4cc>)
 8000a12:	f000 fb89 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a16:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a28:	230e      	movs	r3, #14
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4840      	ldr	r0, [pc, #256]	; (8000b34 <MX_GPIO_Init+0x4d0>)
 8000a34:	f000 fb78 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3e:	2312      	movs	r3, #18
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4837      	ldr	r0, [pc, #220]	; (8000b34 <MX_GPIO_Init+0x4d0>)
 8000a56:	f000 fb67 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a60:	2312      	movs	r3, #18
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4830      	ldr	r0, [pc, #192]	; (8000b38 <MX_GPIO_Init+0x4d4>)
 8000a78:	f000 fb56 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4827      	ldr	r0, [pc, #156]	; (8000b38 <MX_GPIO_Init+0x4d4>)
 8000a9a:	f000 fb45 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000a9e:	2348      	movs	r3, #72	; 0x48
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aae:	230e      	movs	r3, #14
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481c      	ldr	r0, [pc, #112]	; (8000b2c <MX_GPIO_Init+0x4c8>)
 8000aba:	f000 fb35 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000abe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4815      	ldr	r0, [pc, #84]	; (8000b30 <MX_GPIO_Init+0x4cc>)
 8000adc:	f000 fb24 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ae0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_GPIO_Init+0x4cc>)
 8000afa:	f000 fb15 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000afe:	2360      	movs	r3, #96	; 0x60
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_GPIO_Init+0x4c4>)
 8000b1a:	f000 fb05 	bl	8001128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3738      	adds	r7, #56	; 0x38
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40021800 	.word	0x40021800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000

08000b3c <Task1_Handler>:

/* USER CODE BEGIN 4 */

static void Task1_Handler(void* Parameter)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)Parameter);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f003 ff8f 	bl	8004a68 <puts>
		taskYIELD();
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <Task1_Handler+0x20>)
 8000b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	f3bf 8f4f 	dsb	sy
 8000b56:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)Parameter);
 8000b5a:	e7f3      	b.n	8000b44 <Task1_Handler+0x8>
 8000b5c:	e000ed04 	.word	0xe000ed04

08000b60 <Task2_Handler>:
	}
}

static void Task2_Handler(void* Parameter)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	while(1)
		{
			printf("%s\n", (char*)Parameter);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f003 ff7d 	bl	8004a68 <puts>
			taskYIELD();
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <Task2_Handler+0x20>)
 8000b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	f3bf 8f6f 	isb	sy
			printf("%s\n", (char*)Parameter);
 8000b7e:	e7f3      	b.n	8000b68 <Task2_Handler+0x8>
 8000b80:	e000ed04 	.word	0xe000ed04

08000b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b96:	f000 f9c5 	bl	8000f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40001000 	.word	0x40001000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	; 0x38
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_InitTick+0xe4>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <HAL_InitTick+0xe4>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6413      	str	r3, [r2, #64]	; 0x40
 8000c24:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_InitTick+0xe4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c30:	f107 0210 	add.w	r2, r7, #16
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f8be 	bl	8001dbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4a:	f001 f8a3 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8000c4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c52:	f001 f89f 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8000c56:	4603      	mov	r3, r0
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <HAL_InitTick+0xe8>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3b01      	subs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c92:	f001 f8c5 	bl	8001e20 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11b      	bne.n	8000cdc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <HAL_InitTick+0xec>)
 8000ca6:	f001 f915 	bl	8001ed4 <HAL_TIM_Base_Start_IT>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb8:	2036      	movs	r0, #54	; 0x36
 8000cba:	f000 fa27 	bl	800110c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d808      	bhi.n	8000cd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f000 fa03 	bl	80010d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_InitTick+0xf4>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e002      	b.n	8000cdc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	40001000 	.word	0x40001000
 8000cf8:	20000004 	.word	0x20000004

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM6_DAC_IRQHandler+0x10>)
 8000d2e:	f001 f941 	bl	8001fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000094 	.word	0x20000094

08000d3c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <ITM_SendChar+0x48>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <ITM_SendChar+0x48>)
 8000d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d50:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <ITM_SendChar+0x4c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <ITM_SendChar+0x4c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d5e:	bf00      	nop
 8000d60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f8      	beq.n	8000d60 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000edfc 	.word	0xe000edfc
 8000d88:	e0000e00 	.word	0xe0000e00

08000d8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00a      	b.n	8000db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4601      	mov	r1, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf0      	blt.n	8000d9e <_read+0x12>
  }

  return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e009      	b.n	8000dec <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ffab 	bl	8000d3c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf1      	blt.n	8000dd8 <_write+0x12>
  }
  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff ffd7 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f003 fd2d 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb19 	bl	80004f4 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ec4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ed0:	080054a0 	.word	0x080054a0
  ldr r2, =_sbss
 8000ed4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ed8:	20012e9c 	.word	0x20012e9c

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f8d8 	bl	80010be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fe78 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fe4e 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200000dc 	.word	0x200000dc

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200000dc 	.word	0x200000dc

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff4c 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e6:	f7ff ff61 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	6978      	ldr	r0, [r7, #20]
 80010f2:	f7ff ffb1 	bl	8001058 <NVIC_EncodePriority>
 80010f6:	4602      	mov	r2, r0
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff80 	bl	8001004 <__NVIC_SetPriority>
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff54 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e177      	b.n	8001434 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8166 	bne.w	800142e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	2b02      	cmp	r3, #2
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d017      	beq.n	8001218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d123      	bne.n	800126c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0203 	and.w	r2, r3, #3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80c0 	beq.w	800142e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b66      	ldr	r3, [pc, #408]	; (800144c <HAL_GPIO_Init+0x324>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a65      	ldr	r2, [pc, #404]	; (800144c <HAL_GPIO_Init+0x324>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b63      	ldr	r3, [pc, #396]	; (800144c <HAL_GPIO_Init+0x324>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ca:	4a61      	ldr	r2, [pc, #388]	; (8001450 <HAL_GPIO_Init+0x328>)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <HAL_GPIO_Init+0x32c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d037      	beq.n	8001366 <HAL_GPIO_Init+0x23e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_GPIO_Init+0x330>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d031      	beq.n	8001362 <HAL_GPIO_Init+0x23a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_GPIO_Init+0x334>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x236>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a55      	ldr	r2, [pc, #340]	; (8001460 <HAL_GPIO_Init+0x338>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x232>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a54      	ldr	r2, [pc, #336]	; (8001464 <HAL_GPIO_Init+0x33c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x22e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a53      	ldr	r2, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x340>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x22a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x344>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x348>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x34c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x350>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x21a>
 800133e:	2309      	movs	r3, #9
 8001340:	e012      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001342:	230a      	movs	r3, #10
 8001344:	e010      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001346:	2308      	movs	r3, #8
 8001348:	e00e      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800134a:	2307      	movs	r3, #7
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800134e:	2306      	movs	r3, #6
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	; (8001450 <HAL_GPIO_Init+0x328>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_GPIO_Init+0x354>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a34      	ldr	r2, [pc, #208]	; (800147c <HAL_GPIO_Init+0x354>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b32      	ldr	r3, [pc, #200]	; (800147c <HAL_GPIO_Init+0x354>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_GPIO_Init+0x354>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_GPIO_Init+0x354>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <HAL_GPIO_Init+0x354>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_GPIO_Init+0x354>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_GPIO_Init+0x354>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f ae84 	bls.w	8001144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40021400 	.word	0x40021400
 800146c:	40021800 	.word	0x40021800
 8001470:	40021c00 	.word	0x40021c00
 8001474:	40022000 	.word	0x40022000
 8001478:	40022400 	.word	0x40022400
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e267      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e242      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a65      	ldr	r2, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fcee 	bl	8000f4c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fcea 	bl	8000f4c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e207      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fcda 	bl	8000f4c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fcd6 	bl	8000f4c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f3      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fc8f 	bl	8000f4c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fc8b 	bl	8000f4c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a8      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4925      	ldr	r1, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fc6e 	bl	8000f4c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fc6a 	bl	8000f4c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e187      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fc4e 	bl	8000f4c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fc4a 	bl	8000f4c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e167      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fc37 	bl	8000f4c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fc33 	bl	8000f4c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d907      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e150      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470000 	.word	0x42470000
 80016fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ea      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b77      	ldr	r3, [pc, #476]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b74      	ldr	r3, [pc, #464]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fbf3 	bl	8000f4c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fbef 	bl	8000f4c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e10c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x2ea>
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x30c>
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fbb4 	bl	8000f4c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fbb0 	bl	8000f4c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x334>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fb9e 	bl	8000f4c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fb9a 	bl	8000f4c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0b5      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a1 	beq.w	8001994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d05c      	beq.n	8001918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d141      	bne.n	80018ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb6e 	bl	8000f4c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fb6a 	bl	8000f4c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fb43 	bl	8000f4c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff fb3f 	bl	8000f4c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e05c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x416>
 80018e8:	e054      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb2c 	bl	8000f4c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fb28 	bl	8000f4c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e038      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa5a 	bl	8000f4c <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa56 	bl	8000f4c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f85a 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08005414 	.word	0x08005414
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b094      	sub	sp, #80	; 0x50
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80e1 	bhi.w	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e0db      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba8:	e0db      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bae:	e0d8      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 0100 	mov.w	r1, #0
 8001bee:	0159      	lsls	r1, r3, #5
 8001bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf4:	0150      	lsls	r0, r2, #5
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	1a51      	subs	r1, r2, r1
 8001bfe:	6139      	str	r1, [r7, #16]
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb63 0301 	sbc.w	r3, r3, r1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c14:	4659      	mov	r1, fp
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4651      	mov	r1, sl
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4651      	mov	r1, sl
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4651      	mov	r1, sl
 8001c24:	ebb2 0801 	subs.w	r8, r2, r1
 8001c28:	4659      	mov	r1, fp
 8001c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	eb18 0303 	adds.w	r3, r8, r3
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	eb49 0303 	adc.w	r3, r9, r3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c62:	4629      	mov	r1, r5
 8001c64:	024b      	lsls	r3, r1, #9
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	024a      	lsls	r2, r1, #9
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c80:	f7fe fab6 	bl	80001f0 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	4611      	mov	r1, r2
 8001c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0159      	lsls	r1, r3, #5
 8001cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cba:	0150      	lsls	r0, r2, #5
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	18e3      	adds	r3, r4, r3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	464b      	mov	r3, r9
 8001d04:	eb45 0303 	adc.w	r3, r5, r3
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d20:	4621      	mov	r1, r4
 8001d22:	028a      	lsls	r2, r1, #10
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	61fa      	str	r2, [r7, #28]
 8001d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d34:	f7fe fa5c 	bl	80001f0 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3750      	adds	r7, #80	; 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08005424 	.word	0x08005424

08001dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	220f      	movs	r2, #15
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCC_GetClockConfig+0x60>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e041      	b.n	8001eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f839 	bl	8001ebe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 f9d8 	bl	8002214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e04e      	b.n	8001f8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d022      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d01d      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d018      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_TIM_Base_Start_IT+0xd8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d111      	bne.n	8001f78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d010      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f76:	e007      	b.n	8001f88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	40000800 	.word	0x40000800
 8001fa4:	40000c00 	.word	0x40000c00
 8001fa8:	40010400 	.word	0x40010400
 8001fac:	40014000 	.word	0x40014000
 8001fb0:	40001800 	.word	0x40001800

08001fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0202 	mvn.w	r2, #2
 8001fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8ee 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8e0 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8f1 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0204 	mvn.w	r2, #4
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c4 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8b6 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8c7 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b08      	cmp	r3, #8
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b08      	cmp	r3, #8
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0208 	mvn.w	r2, #8
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f89a 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f88c 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f89d 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0210 	mvn.w	r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2208      	movs	r2, #8
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f870 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f862 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f873 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0201 	mvn.w	r2, #1
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fd26 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f902 	bl	8002368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f838 	bl	8002200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0220 	mvn.w	r2, #32
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8cc 	bl	8002354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	; (8002328 <TIM_Base_SetConfig+0x114>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002232:	d00f      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3d      	ldr	r2, [pc, #244]	; (800232c <TIM_Base_SetConfig+0x118>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00b      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <TIM_Base_SetConfig+0x11c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d007      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <TIM_Base_SetConfig+0x120>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <TIM_Base_SetConfig+0x124>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <TIM_Base_SetConfig+0x114>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d027      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2c      	ldr	r2, [pc, #176]	; (800232c <TIM_Base_SetConfig+0x118>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d023      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <TIM_Base_SetConfig+0x11c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <TIM_Base_SetConfig+0x120>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01b      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <TIM_Base_SetConfig+0x124>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d017      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <TIM_Base_SetConfig+0x128>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a27      	ldr	r2, [pc, #156]	; (8002340 <TIM_Base_SetConfig+0x12c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00f      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <TIM_Base_SetConfig+0x130>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <TIM_Base_SetConfig+0x134>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <TIM_Base_SetConfig+0x138>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a23      	ldr	r2, [pc, #140]	; (8002350 <TIM_Base_SetConfig+0x13c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <TIM_Base_SetConfig+0x114>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0xf8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <TIM_Base_SetConfig+0x124>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40000400 	.word	0x40000400
 8002330:	40000800 	.word	0x40000800
 8002334:	40000c00 	.word	0x40000c00
 8002338:	40010400 	.word	0x40010400
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	40001800 	.word	0x40001800
 800234c:	40001c00 	.word	0x40001c00
 8002350:	40002000 	.word	0x40002000

08002354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 0208 	add.w	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 0208 	add.w	r2, r3, #8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0208 	add.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d103      	bne.n	800243e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e00c      	b.n	8002458 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3308      	adds	r3, #8
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e002      	b.n	800244c <vListInsert+0x2e>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	d2f6      	bcs.n	8002446 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6892      	ldr	r2, [r2, #8]
 80024a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6852      	ldr	r2, [r2, #4]
 80024b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d103      	bne.n	80024c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueGenericReset+0x2a>
        __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	60bb      	str	r3, [r7, #8]
    }
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800250e:	f001 fee3 	bl	80042d8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	441a      	add	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	3b01      	subs	r3, #1
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	441a      	add	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	22ff      	movs	r2, #255	; 0xff
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00f      	beq.n	800258c <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3310      	adds	r3, #16
 8002570:	4618      	mov	r0, r3
 8002572:	f000 ffdf 	bl	8003534 <xTaskRemoveFromEventList>
 8002576:	e009      	b.n	800258c <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3310      	adds	r3, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fefd 	bl	800237c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3324      	adds	r3, #36	; 0x24
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fef8 	bl	800237c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800258c:	f001 fed4 	bl	8004338 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800259a:	b580      	push	{r7, lr}
 800259c:	b08c      	sub	sp, #48	; 0x30
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <xQueueGenericCreate+0x2a>
        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	61bb      	str	r3, [r7, #24]
    }
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <xQueueGenericCreate+0x48>
 80025d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d101      	bne.n	80025e6 <xQueueGenericCreate+0x4c>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <xQueueGenericCreate+0x4e>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <xQueueGenericCreate+0x68>
        __asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	617b      	str	r3, [r7, #20]
    }
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002608:	d90a      	bls.n	8002620 <xQueueGenericCreate+0x86>
        __asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	613b      	str	r3, [r7, #16]
    }
 800261c:	bf00      	nop
 800261e:	e7fe      	b.n	800261e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	3350      	adds	r3, #80	; 0x50
 8002624:	4618      	mov	r0, r3
 8002626:	f001 ff79 	bl	800451c <pvPortMalloc>
 800262a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3350      	adds	r3, #80	; 0x50
 800263a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4613      	mov	r3, r2
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f805 	bl	8002658 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800264e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002650:	4618      	mov	r0, r3
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e002      	b.n	800267a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002686:	2101      	movs	r1, #1
 8002688:	69b8      	ldr	r0, [r7, #24]
 800268a:	f7ff ff2b 	bl	80024e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	; 0x38
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <xQueueGenericSend+0x32>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <xQueueGenericSend+0x40>
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <xQueueGenericSend+0x44>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <xQueueGenericSend+0x46>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <xQueueGenericSend+0x60>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d103      	bne.n	800270e <xQueueGenericSend+0x6e>
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <xQueueGenericSend+0x72>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueGenericSend+0x74>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGenericSend+0x8e>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800272e:	f001 f897 	bl	8003860 <xTaskGetSchedulerState>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <xQueueGenericSend+0x9e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <xQueueGenericSend+0xa2>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <xQueueGenericSend+0xa4>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <xQueueGenericSend+0xbe>
        __asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	61fb      	str	r3, [r7, #28]
    }
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800275e:	f001 fdbb 	bl	80042d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <xQueueGenericSend+0xd4>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d112      	bne.n	800279a <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800277a:	f000 f9f5 	bl	8002b68 <prvCopyDataToQueue>
 800277e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	3324      	adds	r3, #36	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fed1 	bl	8003534 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002792:	f001 fdd1 	bl	8004338 <vPortExitCritical>
                return pdPASS;
 8002796:	2301      	movs	r3, #1
 8002798:	e062      	b.n	8002860 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027a0:	f001 fdca 	bl	8004338 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e05b      	b.n	8002860 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 ff20 	bl	80035f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027bc:	f001 fdbc 	bl	8004338 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027c0:	f000 fcca 	bl	8003158 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027c4:	f001 fd88 	bl	80042d8 <vPortEnterCritical>
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d103      	bne.n	80027de <xQueueGenericSend+0x13e>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d103      	bne.n	80027f4 <xQueueGenericSend+0x154>
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f4:	f001 fda0 	bl	8004338 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f8:	1d3a      	adds	r2, r7, #4
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 ff0f 	bl	8003624 <xTaskCheckForTimeOut>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d123      	bne.n	8002854 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800280c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280e:	f000 faa3 	bl	8002d58 <prvIsQueueFull>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3310      	adds	r3, #16
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fe37 	bl	8003494 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002828:	f000 fa2e 	bl	8002c88 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800282c:	f000 fca2 	bl	8003174 <xTaskResumeAll>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d193      	bne.n	800275e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <xQueueGenericSend+0x1c8>)
 8002838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	e78a      	b.n	800275e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f000 fa1d 	bl	8002c88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800284e:	f000 fc91 	bl	8003174 <xTaskResumeAll>
 8002852:	e784      	b.n	800275e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002856:	f000 fa17 	bl	8002c88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800285a:	f000 fc8b 	bl	8003174 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800285e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002860:	4618      	mov	r0, r3
 8002862:	3738      	adds	r7, #56	; 0x38
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	e000ed04 	.word	0xe000ed04

0800286c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b090      	sub	sp, #64	; 0x40
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <xQueueGenericSendFromISR+0x3c>
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <xQueueGenericSendFromISR+0x40>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <xQueueGenericSendFromISR+0x42>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d103      	bne.n	80028d6 <xQueueGenericSendFromISR+0x6a>
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <xQueueGenericSendFromISR+0x6e>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueGenericSendFromISR+0x70>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	623b      	str	r3, [r7, #32]
    }
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028f6:	f001 fdd1 	bl	800449c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028fa:	f3ef 8211 	mrs	r2, BASEPRI
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	61fa      	str	r2, [r7, #28]
 8002910:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002912:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <xQueueGenericSendFromISR+0xbc>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d13e      	bne.n	80029a6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800292e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800293e:	f000 f913 	bl	8002b68 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002942:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d112      	bne.n	8002972 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d025      	beq.n	80029a0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	3324      	adds	r3, #36	; 0x24
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fdeb 	bl	8003534 <xTaskRemoveFromEventList>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01d      	beq.n	80029a0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01a      	beq.n	80029a0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e016      	b.n	80029a0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002976:	2b7f      	cmp	r3, #127	; 0x7f
 8002978:	d10a      	bne.n	8002990 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	617b      	str	r3, [r7, #20]
    }
 800298c:	bf00      	nop
 800298e:	e7fe      	b.n	800298e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002994:	3301      	adds	r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	b25a      	sxtb	r2, r3
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80029a0:	2301      	movs	r3, #1
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80029a4:	e001      	b.n	80029aa <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029b4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3740      	adds	r7, #64	; 0x40
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <xQueueReceive+0x30>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	623b      	str	r3, [r7, #32]
    }
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <xQueueReceive+0x3e>
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <xQueueReceive+0x42>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <xQueueReceive+0x44>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <xQueueReceive+0x5e>
        __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	61fb      	str	r3, [r7, #28]
    }
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a1e:	f000 ff1f 	bl	8003860 <xTaskGetSchedulerState>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <xQueueReceive+0x6e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <xQueueReceive+0x72>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <xQueueReceive+0x74>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <xQueueReceive+0x8e>
        __asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	61bb      	str	r3, [r7, #24]
    }
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a4e:	f001 fc43 	bl	80042d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d014      	beq.n	8002a88 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a62:	f000 f8eb 	bl	8002c3c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	3310      	adds	r3, #16
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd5a 	bl	8003534 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a80:	f001 fc5a 	bl	8004338 <vPortExitCritical>
                return pdPASS;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e069      	b.n	8002b5c <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a8e:	f001 fc53 	bl	8004338 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e062      	b.n	8002b5c <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fda9 	bl	80035f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002aaa:	f001 fc45 	bl	8004338 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002aae:	f000 fb53 	bl	8003158 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ab2:	f001 fc11 	bl	80042d8 <vPortEnterCritical>
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d103      	bne.n	8002acc <xQueueReceive+0x10c>
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d103      	bne.n	8002ae2 <xQueueReceive+0x122>
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae2:	f001 fc29 	bl	8004338 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ae6:	1d3a      	adds	r2, r7, #4
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fd98 	bl	8003624 <xTaskCheckForTimeOut>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d123      	bne.n	8002b42 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afc:	f000 f916 	bl	8002d2c <prvIsQueueEmpty>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	3324      	adds	r3, #36	; 0x24
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fcc0 	bl	8003494 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b16:	f000 f8b7 	bl	8002c88 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b1a:	f000 fb2b 	bl	8003174 <xTaskResumeAll>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d194      	bne.n	8002a4e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <xQueueReceive+0x1a4>)
 8002b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	e78b      	b.n	8002a4e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b38:	f000 f8a6 	bl	8002c88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b3c:	f000 fb1a 	bl	8003174 <xTaskResumeAll>
 8002b40:	e785      	b.n	8002a4e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b44:	f000 f8a0 	bl	8002c88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b48:	f000 fb14 	bl	8003174 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b4e:	f000 f8ed 	bl	8002d2c <prvIsQueueEmpty>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f43f af7a 	beq.w	8002a4e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002b5a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3730      	adds	r7, #48	; 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d14d      	bne.n	8002c2a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fe82 	bl	800389c <xTaskPriorityDisinherit>
 8002b98:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	e043      	b.n	8002c2a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d119      	bne.n	8002bdc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6858      	ldr	r0, [r3, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	f001 fed4 	bl	8004960 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	441a      	add	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d32b      	bcc.n	8002c2a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e026      	b.n	8002c2a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68d8      	ldr	r0, [r3, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	461a      	mov	r2, r3
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	f001 feba 	bl	8004960 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d207      	bcs.n	8002c18 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	425b      	negs	r3, r3
 8002c12:	441a      	add	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d105      	bne.n	8002c2a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c32:	697b      	ldr	r3, [r7, #20]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	441a      	add	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d303      	bcc.n	8002c70 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68d9      	ldr	r1, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6838      	ldr	r0, [r7, #0]
 8002c7c:	f001 fe70 	bl	8004960 <memcpy>
    }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c90:	f001 fb22 	bl	80042d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c9a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c9c:	e011      	b.n	8002cc2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d012      	beq.n	8002ccc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3324      	adds	r3, #36	; 0x24
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fc42 	bl	8003534 <xTaskRemoveFromEventList>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cb6:	f000 fd1b 	bl	80036f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	dce9      	bgt.n	8002c9e <prvUnlockQueue+0x16>
 8002cca:	e000      	b.n	8002cce <prvUnlockQueue+0x46>
                        break;
 8002ccc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002cd6:	f001 fb2f 	bl	8004338 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cda:	f001 fafd 	bl	80042d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ce4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce6:	e011      	b.n	8002d0c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3310      	adds	r3, #16
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fc1d 	bl	8003534 <xTaskRemoveFromEventList>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d00:	f000 fcf6 	bl	80036f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dce9      	bgt.n	8002ce8 <prvUnlockQueue+0x60>
 8002d14:	e000      	b.n	8002d18 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d16:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d20:	f001 fb0a 	bl	8004338 <vPortExitCritical>
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d34:	f001 fad0 	bl	80042d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e001      	b.n	8002d4a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d4a:	f001 faf5 	bl	8004338 <vPortExitCritical>

    return xReturn;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d60:	f001 faba 	bl	80042d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d102      	bne.n	8002d76 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e001      	b.n	8002d7a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d7a:	f001 fadd 	bl	8004338 <vPortExitCritical>

    return xReturn;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e014      	b.n	8002dc2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d98:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <vQueueAddToRegistry+0x50>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002da4:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <vQueueAddToRegistry+0x50>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <vQueueAddToRegistry+0x50>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002dba:	e006      	b.n	8002dca <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	d9e7      	bls.n	8002d98 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	200000e0 	.word	0x200000e0

08002ddc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002dec:	f001 fa74 	bl	80042d8 <vPortEnterCritical>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d103      	bne.n	8002e06 <vQueueWaitForMessageRestricted+0x2a>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d103      	bne.n	8002e1c <vQueueWaitForMessageRestricted+0x40>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e1c:	f001 fa8c 	bl	8004338 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3324      	adds	r3, #36	; 0x24
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fb53 	bl	80034dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff26 	bl	8002c88 <prvUnlockQueue>
    }
 8002e3c:	bf00      	nop
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	; 0x30
 8002e48:	af04      	add	r7, sp, #16
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 fb5f 	bl	800451c <pvPortMalloc>
 8002e5e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00e      	beq.n	8002e84 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e66:	2058      	movs	r0, #88	; 0x58
 8002e68:	f001 fb58 	bl	800451c <pvPortMalloc>
 8002e6c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7a:	e005      	b.n	8002e88 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002e7c:	6978      	ldr	r0, [r7, #20]
 8002e7e:	f001 fc2d 	bl	80046dc <vPortFree>
 8002e82:	e001      	b.n	8002e88 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	2300      	movs	r3, #0
 8002e92:	9303      	str	r3, [sp, #12]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	9302      	str	r3, [sp, #8]
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f80e 	bl	8002ec6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002eaa:	69f8      	ldr	r0, [r7, #28]
 8002eac:	f000 f8a2 	bl	8002ff4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e002      	b.n	8002ebc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
    }
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b088      	sub	sp, #32
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	461a      	mov	r2, r3
 8002ede:	21a5      	movs	r1, #165	; 0xa5
 8002ee0:	f001 fd4c 	bl	800497c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f023 0307 	bic.w	r3, r3, #7
 8002efc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	617b      	str	r3, [r7, #20]
    }
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01f      	beq.n	8002f64 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e012      	b.n	8002f50 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	7819      	ldrb	r1, [r3, #0]
 8002f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	3334      	adds	r3, #52	; 0x34
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d9e9      	bls.n	8002f2a <prvInitialiseNewTask+0x64>
 8002f56:	e000      	b.n	8002f5a <prvInitialiseNewTask+0x94>
            {
                break;
 8002f58:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f62:	e003      	b.n	8002f6c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d901      	bls.n	8002f76 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f72:	2304      	movs	r3, #4
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f80:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	2200      	movs	r2, #0
 8002f86:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fa15 	bl	80023bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	3318      	adds	r3, #24
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fa10 	bl	80023bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	f1c3 0205 	rsb	r2, r3, #5
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	3350      	adds	r3, #80	; 0x50
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 fcde 	bl	800497c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	3354      	adds	r3, #84	; 0x54
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fcd7 	bl	800497c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	69b8      	ldr	r0, [r7, #24]
 8002fd4:	f001 f854 	bl	8004080 <pxPortInitialiseStack>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fea:	bf00      	nop
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ffc:	f001 f96c 	bl	80042d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <prvAddNewTaskToReadyList+0xa8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <prvAddNewTaskToReadyList+0xa8>)
 8003008:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <prvAddNewTaskToReadyList+0xac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003012:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <prvAddNewTaskToReadyList+0xac>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <prvAddNewTaskToReadyList+0xa8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d110      	bne.n	8003042 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003020:	f000 fb84 	bl	800372c <prvInitialiseTaskLists>
 8003024:	e00d      	b.n	8003042 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <prvAddNewTaskToReadyList+0xb0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <prvAddNewTaskToReadyList+0xac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	429a      	cmp	r2, r3
 800303a:	d802      	bhi.n	8003042 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <prvAddNewTaskToReadyList+0xac>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <prvAddNewTaskToReadyList+0xb4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <prvAddNewTaskToReadyList+0xb4>)
 800304a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <prvAddNewTaskToReadyList+0xb4>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4313      	orrs	r3, r2
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f7ff f9aa 	bl	80023d6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003082:	f001 f959 	bl	8004338 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <prvAddNewTaskToReadyList+0xb0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <prvAddNewTaskToReadyList+0xac>)
 8003090:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200001f8 	.word	0x200001f8
 80030a0:	20000120 	.word	0x20000120
 80030a4:	20000204 	.word	0x20000204
 80030a8:	20000214 	.word	0x20000214
 80030ac:	20000200 	.word	0x20000200
 80030b0:	20000124 	.word	0x20000124

080030b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <vTaskStartScheduler+0x88>)
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2300      	movs	r3, #0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2300      	movs	r3, #0
 80030c4:	2282      	movs	r2, #130	; 0x82
 80030c6:	491e      	ldr	r1, [pc, #120]	; (8003140 <vTaskStartScheduler+0x8c>)
 80030c8:	481e      	ldr	r0, [pc, #120]	; (8003144 <vTaskStartScheduler+0x90>)
 80030ca:	f7ff febb 	bl	8002e44 <xTaskCreate>
 80030ce:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80030d6:	f000 fcc1 	bl	8003a5c <xTimerCreateTimerTask>
 80030da:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d116      	bne.n	8003110 <vTaskStartScheduler+0x5c>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
    }
 80030f4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <vTaskStartScheduler+0x94>)
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <vTaskStartScheduler+0x98>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <vTaskStartScheduler+0x9c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800310a:	f001 f843 	bl	8004194 <xPortStartScheduler>
 800310e:	e00e      	b.n	800312e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d10a      	bne.n	800312e <vTaskStartScheduler+0x7a>
        __asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	607b      	str	r3, [r7, #4]
    }
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <vTaskStartScheduler+0xa0>)
 8003130:	681b      	ldr	r3, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	2000021c 	.word	0x2000021c
 8003140:	080053fc 	.word	0x080053fc
 8003144:	08003709 	.word	0x08003709
 8003148:	20000218 	.word	0x20000218
 800314c:	20000204 	.word	0x20000204
 8003150:	200001fc 	.word	0x200001fc
 8003154:	2000000c 	.word	0x2000000c

08003158 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <vTaskSuspendAll+0x18>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <vTaskSuspendAll+0x18>)
 8003164:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	20000220 	.word	0x20000220

08003174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <xTaskResumeAll+0xfc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	603b      	str	r3, [r7, #0]
    }
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80031a0:	f001 f89a 	bl	80042d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80031a4:	4b32      	ldr	r3, [pc, #200]	; (8003270 <xTaskResumeAll+0xfc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4a31      	ldr	r2, [pc, #196]	; (8003270 <xTaskResumeAll+0xfc>)
 80031ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <xTaskResumeAll+0xfc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d155      	bne.n	8003262 <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <xTaskResumeAll+0x100>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d051      	beq.n	8003262 <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031be:	e02e      	b.n	800321e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <xTaskResumeAll+0x104>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3318      	adds	r3, #24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f95f 	bl	8002490 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f95a 	bl	8002490 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <xTaskResumeAll+0x108>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	4a24      	ldr	r2, [pc, #144]	; (800327c <xTaskResumeAll+0x108>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <xTaskResumeAll+0x10c>)
 80031fc:	441a      	add	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f7ff f8e6 	bl	80023d6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <xTaskResumeAll+0x110>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <xTaskResumeAll+0x114>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <xTaskResumeAll+0x104>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1cc      	bne.n	80031c0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800322c:	f000 fafc 	bl	8003828 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <xTaskResumeAll+0x118>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800323c:	f000 f838 	bl	80032b0 <xTaskIncrementTick>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <xTaskResumeAll+0x114>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f1      	bne.n	800323c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <xTaskResumeAll+0x118>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <xTaskResumeAll+0x114>)
 8003260:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003262:	f001 f869 	bl	8004338 <vPortExitCritical>

    return xAlreadyYielded;
 8003266:	687b      	ldr	r3, [r7, #4]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000220 	.word	0x20000220
 8003274:	200001f8 	.word	0x200001f8
 8003278:	200001b8 	.word	0x200001b8
 800327c:	20000200 	.word	0x20000200
 8003280:	20000124 	.word	0x20000124
 8003284:	20000120 	.word	0x20000120
 8003288:	2000020c 	.word	0x2000020c
 800328c:	20000208 	.word	0x20000208

08003290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <xTaskGetTickCount+0x1c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	200001fc 	.word	0x200001fc

080032b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ba:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <xTaskIncrementTick+0x108>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d16f      	bne.n	80033a2 <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <xTaskIncrementTick+0x10c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032ca:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <xTaskIncrementTick+0x10c>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d120      	bne.n	8003318 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <xTaskIncrementTick+0x110>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <xTaskIncrementTick+0x46>
        __asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	603b      	str	r3, [r7, #0]
    }
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTaskIncrementTick+0x44>
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <xTaskIncrementTick+0x110>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <xTaskIncrementTick+0x114>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <xTaskIncrementTick+0x110>)
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4a2f      	ldr	r2, [pc, #188]	; (80033c4 <xTaskIncrementTick+0x114>)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <xTaskIncrementTick+0x118>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a2d      	ldr	r2, [pc, #180]	; (80033c8 <xTaskIncrementTick+0x118>)
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	f000 fa88 	bl	8003828 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <xTaskIncrementTick+0x11c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	d344      	bcc.n	80033ac <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003322:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <xTaskIncrementTick+0x110>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <xTaskIncrementTick+0x11c>)
 800332e:	f04f 32ff 	mov.w	r2, #4294967295
 8003332:	601a      	str	r2, [r3, #0]
                    break;
 8003334:	e03a      	b.n	80033ac <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <xTaskIncrementTick+0x110>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	d203      	bcs.n	8003356 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <xTaskIncrementTick+0x11c>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003354:	e02a      	b.n	80033ac <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f898 	bl	8002490 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3318      	adds	r3, #24
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f88f 	bl	8002490 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	2201      	movs	r2, #1
 8003378:	409a      	lsls	r2, r3
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <xTaskIncrementTick+0x120>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <xTaskIncrementTick+0x120>)
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <xTaskIncrementTick+0x124>)
 8003392:	441a      	add	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7ff f81b 	bl	80023d6 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033a0:	e7bf      	b.n	8003322 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <xTaskIncrementTick+0x128>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <xTaskIncrementTick+0x128>)
 80033aa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80033ac:	697b      	ldr	r3, [r7, #20]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000220 	.word	0x20000220
 80033bc:	200001fc 	.word	0x200001fc
 80033c0:	200001b0 	.word	0x200001b0
 80033c4:	200001b4 	.word	0x200001b4
 80033c8:	20000210 	.word	0x20000210
 80033cc:	20000218 	.word	0x20000218
 80033d0:	20000200 	.word	0x20000200
 80033d4:	20000124 	.word	0x20000124
 80033d8:	20000208 	.word	0x20000208

080033dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <vTaskSwitchContext+0xa4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <vTaskSwitchContext+0xa8>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033f0:	e03f      	b.n	8003472 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <vTaskSwitchContext+0xa8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <vTaskSwitchContext+0xac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	f1c3 031f 	rsb	r3, r3, #31
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	491f      	ldr	r1, [pc, #124]	; (800348c <vTaskSwitchContext+0xb0>)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vTaskSwitchContext+0x5a>
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <vTaskSwitchContext+0xb0>)
 8003444:	4413      	add	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3308      	adds	r3, #8
 800345a:	429a      	cmp	r2, r3
 800345c:	d104      	bne.n	8003468 <vTaskSwitchContext+0x8c>
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <vTaskSwitchContext+0xb4>)
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000220 	.word	0x20000220
 8003484:	2000020c 	.word	0x2000020c
 8003488:	20000200 	.word	0x20000200
 800348c:	20000124 	.word	0x20000124
 8003490:	20000120 	.word	0x20000120

08003494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60fb      	str	r3, [r7, #12]
    }
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <vTaskPlaceOnEventList+0x44>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3318      	adds	r3, #24
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe ffab 	bl	800241e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034c8:	2101      	movs	r1, #1
 80034ca:	6838      	ldr	r0, [r7, #0]
 80034cc:	f000 fa60 	bl	8003990 <prvAddCurrentTaskToDelayedList>
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000120 	.word	0x20000120

080034dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	617b      	str	r3, [r7, #20]
    }
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <vTaskPlaceOnEventListRestricted+0x54>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3318      	adds	r3, #24
 800350a:	4619      	mov	r1, r3
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7fe ff62 	bl	80023d6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68b8      	ldr	r0, [r7, #8]
 8003522:	f000 fa35 	bl	8003990 <prvAddCurrentTaskToDelayedList>
    }
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000120 	.word	0x20000120

08003534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	60fb      	str	r3, [r7, #12]
    }
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	3318      	adds	r3, #24
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe ff93 	bl	8002490 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <xTaskRemoveFromEventList+0xac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11c      	bne.n	80035ac <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe ff8a 	bl	8002490 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <xTaskRemoveFromEventList+0xb0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <xTaskRemoveFromEventList+0xb0>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <xTaskRemoveFromEventList+0xb4>)
 800359c:	441a      	add	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f7fe ff16 	bl	80023d6 <vListInsertEnd>
 80035aa:	e005      	b.n	80035b8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	3318      	adds	r3, #24
 80035b0:	4619      	mov	r1, r3
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <xTaskRemoveFromEventList+0xb8>)
 80035b4:	f7fe ff0f 	bl	80023d6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <xTaskRemoveFromEventList+0xbc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d905      	bls.n	80035d2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <xTaskRemoveFromEventList+0xc0>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e001      	b.n	80035d6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80035d6:	697b      	ldr	r3, [r7, #20]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000220 	.word	0x20000220
 80035e4:	20000200 	.word	0x20000200
 80035e8:	20000124 	.word	0x20000124
 80035ec:	200001b8 	.word	0x200001b8
 80035f0:	20000120 	.word	0x20000120
 80035f4:	2000020c 	.word	0x2000020c

080035f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <vTaskInternalSetTimeOutState+0x24>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <vTaskInternalSetTimeOutState+0x28>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	605a      	str	r2, [r3, #4]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000210 	.word	0x20000210
 8003620:	200001fc 	.word	0x200001fc

08003624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	613b      	str	r3, [r7, #16]
    }
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
    }
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003666:	f000 fe37 	bl	80042d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <xTaskCheckForTimeOut+0xc4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d102      	bne.n	800368a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e026      	b.n	80036d8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <xTaskCheckForTimeOut+0xc8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d00a      	beq.n	80036ac <xTaskCheckForTimeOut+0x88>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	429a      	cmp	r2, r3
 800369e:	d305      	bcc.n	80036ac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e015      	b.n	80036d8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20b      	bcs.n	80036ce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff98 	bl	80035f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e004      	b.n	80036d8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036d8:	f000 fe2e 	bl	8004338 <vPortExitCritical>

    return xReturn;
 80036dc:	69fb      	ldr	r3, [r7, #28]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200001fc 	.word	0x200001fc
 80036ec:	20000210 	.word	0x20000210

080036f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <vTaskMissedYield+0x14>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	2000020c 	.word	0x2000020c

08003708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003710:	f000 f84c 	bl	80037ac <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <prvIdleTask+0x20>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003724:	e7f4      	b.n	8003710 <prvIdleTask+0x8>
 8003726:	bf00      	nop
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e00c      	b.n	8003752 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <prvInitialiseTaskLists+0x60>)
 8003744:	4413      	add	r3, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fe18 	bl	800237c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d9ef      	bls.n	8003738 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <prvInitialiseTaskLists+0x64>)
 800375a:	f7fe fe0f 	bl	800237c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800375e:	480d      	ldr	r0, [pc, #52]	; (8003794 <prvInitialiseTaskLists+0x68>)
 8003760:	f7fe fe0c 	bl	800237c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003764:	480c      	ldr	r0, [pc, #48]	; (8003798 <prvInitialiseTaskLists+0x6c>)
 8003766:	f7fe fe09 	bl	800237c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800376a:	480c      	ldr	r0, [pc, #48]	; (800379c <prvInitialiseTaskLists+0x70>)
 800376c:	f7fe fe06 	bl	800237c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003770:	480b      	ldr	r0, [pc, #44]	; (80037a0 <prvInitialiseTaskLists+0x74>)
 8003772:	f7fe fe03 	bl	800237c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <prvInitialiseTaskLists+0x78>)
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <prvInitialiseTaskLists+0x64>)
 800377a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <prvInitialiseTaskLists+0x7c>)
 800377e:	4a05      	ldr	r2, [pc, #20]	; (8003794 <prvInitialiseTaskLists+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000124 	.word	0x20000124
 8003790:	20000188 	.word	0x20000188
 8003794:	2000019c 	.word	0x2000019c
 8003798:	200001b8 	.word	0x200001b8
 800379c:	200001cc 	.word	0x200001cc
 80037a0:	200001e4 	.word	0x200001e4
 80037a4:	200001b0 	.word	0x200001b0
 80037a8:	200001b4 	.word	0x200001b4

080037ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b2:	e019      	b.n	80037e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80037b4:	f000 fd90 	bl	80042d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <prvCheckTasksWaitingTermination+0x50>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fe63 	bl	8002490 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <prvCheckTasksWaitingTermination+0x54>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <prvCheckTasksWaitingTermination+0x54>)
 80037d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037de:	f000 fdab 	bl	8004338 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f810 	bl	8003808 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e1      	bne.n	80037b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200001cc 	.word	0x200001cc
 8003800:	200001f8 	.word	0x200001f8
 8003804:	200001e0 	.word	0x200001e0

08003808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	4618      	mov	r0, r3
 8003816:	f000 ff61 	bl	80046dc <vPortFree>
                vPortFree( pxTCB );
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 ff5e 	bl	80046dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <prvResetNextTaskUnblockTime+0x30>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <prvResetNextTaskUnblockTime+0x34>)
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800383e:	e005      	b.n	800384c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <prvResetNextTaskUnblockTime+0x30>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <prvResetNextTaskUnblockTime+0x34>)
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200001b0 	.word	0x200001b0
 800385c:	20000218 	.word	0x20000218

08003860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <xTaskGetSchedulerState+0x34>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800386e:	2301      	movs	r3, #1
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	e008      	b.n	8003886 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <xTaskGetSchedulerState+0x38>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800387c:	2302      	movs	r3, #2
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003886:	687b      	ldr	r3, [r7, #4]
    }
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000204 	.word	0x20000204
 8003898:	20000220 	.word	0x20000220

0800389c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038b2:	4b34      	ldr	r3, [pc, #208]	; (8003984 <xTaskPriorityDisinherit+0xe8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d00a      	beq.n	80038d2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
    }
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60bb      	str	r3, [r7, #8]
    }
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f4:	1e5a      	subs	r2, r3, #1
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	429a      	cmp	r2, r3
 8003904:	d039      	beq.n	800397a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d135      	bne.n	800397a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fdbc 	bl	8002490 <uxListRemove>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	2201      	movs	r2, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43da      	mvns	r2, r3
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <xTaskPriorityDisinherit+0xec>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4013      	ands	r3, r2
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <xTaskPriorityDisinherit+0xec>)
 8003932:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f1c3 0205 	rsb	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2201      	movs	r2, #1
 800394e:	409a      	lsls	r2, r3
 8003950:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <xTaskPriorityDisinherit+0xec>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <xTaskPriorityDisinherit+0xec>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <xTaskPriorityDisinherit+0xf0>)
 8003968:	441a      	add	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3304      	adds	r3, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7fe fd30 	bl	80023d6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003976:	2301      	movs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800397a:	697b      	ldr	r3, [r7, #20]
    }
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000120 	.word	0x20000120
 8003988:	20000200 	.word	0x20000200
 800398c:	20000124 	.word	0x20000124

08003990 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <prvAddCurrentTaskToDelayedList+0xb0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fd72 	bl	8002490 <uxListRemove>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	2201      	movs	r2, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4013      	ands	r3, r2
 80039c6:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d10a      	bne.n	80039e8 <prvAddCurrentTaskToDelayedList+0x58>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	481a      	ldr	r0, [pc, #104]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xbc>)
 80039e2:	f7fe fcf8 	bl	80023d6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039e6:	e026      	b.n	8003a36 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d209      	bcs.n	8003a14 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7fe fd06 	bl	800241e <vListInsert>
}
 8003a12:	e010      	b.n	8003a36 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7fe fcfc 	bl	800241e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d202      	bcs.n	8003a36 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a30:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6013      	str	r3, [r2, #0]
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200001fc 	.word	0x200001fc
 8003a44:	20000120 	.word	0x20000120
 8003a48:	20000200 	.word	0x20000200
 8003a4c:	200001e4 	.word	0x200001e4
 8003a50:	200001b4 	.word	0x200001b4
 8003a54:	200001b0 	.word	0x200001b0
 8003a58:	20000218 	.word	0x20000218

08003a5c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a66:	f000 fad5 	bl	8004014 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <xTimerCreateTimerTask+0x54>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <xTimerCreateTimerTask+0x58>)
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2302      	movs	r3, #2
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a80:	490d      	ldr	r1, [pc, #52]	; (8003ab8 <xTimerCreateTimerTask+0x5c>)
 8003a82:	480e      	ldr	r0, [pc, #56]	; (8003abc <xTimerCreateTimerTask+0x60>)
 8003a84:	f7ff f9de 	bl	8002e44 <xTaskCreate>
 8003a88:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	603b      	str	r3, [r7, #0]
    }
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003aa6:	687b      	ldr	r3, [r7, #4]
    }
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000254 	.word	0x20000254
 8003ab4:	20000258 	.word	0x20000258
 8003ab8:	08005404 	.word	0x08005404
 8003abc:	08003bf5 	.word	0x08003bf5

08003ac0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xTimerGenericCommand+0x2e>
        __asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	623b      	str	r3, [r7, #32]
    }
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <xTimerGenericCommand+0x98>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02a      	beq.n	8003b4c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	dc18      	bgt.n	8003b3a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b08:	f7ff feaa 	bl	8003860 <xTaskGetSchedulerState>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d109      	bne.n	8003b26 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <xTimerGenericCommand+0x98>)
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	f107 0114 	add.w	r1, r7, #20
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1e:	f7fe fdbf 	bl	80026a0 <xQueueGenericSend>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24
 8003b24:	e012      	b.n	8003b4c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <xTimerGenericCommand+0x98>)
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	f107 0114 	add.w	r1, r7, #20
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2200      	movs	r2, #0
 8003b32:	f7fe fdb5 	bl	80026a0 <xQueueGenericSend>
 8003b36:	6278      	str	r0, [r7, #36]	; 0x24
 8003b38:	e008      	b.n	8003b4c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <xTimerGenericCommand+0x98>)
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f107 0114 	add.w	r1, r7, #20
 8003b42:	2300      	movs	r3, #0
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	f7fe fe91 	bl	800286c <xQueueGenericSendFromISR>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3728      	adds	r7, #40	; 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000254 	.word	0x20000254

08003b5c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <prvProcessExpiredTimer+0x94>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fc8b 	bl	8002490 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	18d1      	adds	r1, r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	6978      	ldr	r0, [r7, #20]
 8003b96:	f000 f8d1 	bl	8003d3c <prvInsertTimerInActiveList>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01f      	beq.n	8003be0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff88 	bl	8003ac0 <xTimerGenericCommand>
 8003bb0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d113      	bne.n	8003be0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60fb      	str	r3, [r7, #12]
    }
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	6978      	ldr	r0, [r7, #20]
 8003be6:	4798      	blx	r3
    }
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	2000024c 	.word	0x2000024c

08003bf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f857 	bl	8003cb4 <prvGetNextExpireTime>
 8003c06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f803 	bl	8003c18 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c12:	f000 f8d5 	bl	8003dc0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c16:	e7f1      	b.n	8003bfc <prvTimerTask+0x8>

08003c18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c22:	f7ff fa99 	bl	8003158 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c26:	f107 0308 	add.w	r3, r7, #8
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f866 	bl	8003cfc <prvSampleTimeNow>
 8003c30:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d130      	bne.n	8003c9a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <prvProcessTimerOrBlockTask+0x3c>
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d806      	bhi.n	8003c54 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c46:	f7ff fa95 	bl	8003174 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff85 	bl	8003b5c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c52:	e024      	b.n	8003c9e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <prvProcessTimerOrBlockTask+0x90>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <prvProcessTimerOrBlockTask+0x50>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <prvProcessTimerOrBlockTask+0x52>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <prvProcessTimerOrBlockTask+0x94>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7ff f8af 	bl	8002ddc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c7e:	f7ff fa79 	bl	8003174 <xTaskResumeAll>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <prvProcessTimerOrBlockTask+0x98>)
 8003c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	f3bf 8f6f 	isb	sy
    }
 8003c98:	e001      	b.n	8003c9e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c9a:	f7ff fa6b 	bl	8003174 <xTaskResumeAll>
    }
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000250 	.word	0x20000250
 8003cac:	20000254 	.word	0x20000254
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <prvGetNextExpireTime+0x44>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <prvGetNextExpireTime+0x16>
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	e000      	b.n	8003ccc <prvGetNextExpireTime+0x18>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd8:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <prvGetNextExpireTime+0x44>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e001      	b.n	8003ce8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
    }
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	2000024c 	.word	0x2000024c

08003cfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d04:	f7ff fac4 	bl	8003290 <xTaskGetTickCount>
 8003d08:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <prvSampleTimeNow+0x3c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d205      	bcs.n	8003d20 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d14:	f000 f91a 	bl	8003f4c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e002      	b.n	8003d26 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <prvSampleTimeNow+0x3c>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000025c 	.word	0x2000025c

08003d3c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d812      	bhi.n	8003d88 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad2      	subs	r2, r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e01b      	b.n	8003dae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <prvInsertTimerInActiveList+0x7c>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f7fe fb4c 	bl	800241e <vListInsert>
 8003d86:	e012      	b.n	8003dae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d206      	bcs.n	8003d9e <prvInsertTimerInActiveList+0x62>
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e007      	b.n	8003dae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <prvInsertTimerInActiveList+0x80>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7fe fb38 	bl	800241e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dae:	697b      	ldr	r3, [r7, #20]
    }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000250 	.word	0x20000250
 8003dbc:	2000024c 	.word	0x2000024c

08003dc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08c      	sub	sp, #48	; 0x30
 8003dc4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dc6:	e0ae      	b.n	8003f26 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f2c0 80aa 	blt.w	8003f24 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	3304      	adds	r3, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fb55 	bl	8002490 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff87 	bl	8003cfc <prvSampleTimeNow>
 8003dee:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	f200 8097 	bhi.w	8003f26 <prvProcessReceivedCommands+0x166>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <prvProcessReceivedCommands+0x40>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e29 	.word	0x08003e29
 8003e0c:	08003e9d 	.word	0x08003e9d
 8003e10:	08003eb1 	.word	0x08003eb1
 8003e14:	08003efb 	.word	0x08003efb
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e29 	.word	0x08003e29
 8003e20:	08003e9d 	.word	0x08003e9d
 8003e24:	08003eb1 	.word	0x08003eb1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	18d1      	adds	r1, r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e48:	f7ff ff78 	bl	8003d3c <prvInsertTimerInActiveList>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d069      	beq.n	8003f26 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e58:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05e      	beq.n	8003f26 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	441a      	add	r2, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2300      	movs	r3, #0
 8003e76:	2100      	movs	r1, #0
 8003e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e7a:	f7ff fe21 	bl	8003ac0 <xTimerGenericCommand>
 8003e7e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d14f      	bne.n	8003f26 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61bb      	str	r3, [r7, #24]
    }
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003eae:	e03a      	b.n	8003f26 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	617b      	str	r3, [r7, #20]
    }
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	18d1      	adds	r1, r2, r3
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef4:	f7ff ff22 	bl	8003d3c <prvInsertTimerInActiveList>
                        break;
 8003ef8:	e015      	b.n	8003f26 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0a:	f000 fbe7 	bl	80046dc <vPortFree>
 8003f0e:	e00a      	b.n	8003f26 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f22:	e000      	b.n	8003f26 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f24:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <prvProcessReceivedCommands+0x188>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f107 0108 	add.w	r1, r7, #8
 8003f2e:	2200      	movs	r2, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fd45 	bl	80029c0 <xQueueReceive>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f af45 	bne.w	8003dc8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	3728      	adds	r7, #40	; 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000254 	.word	0x20000254

08003f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f52:	e048      	b.n	8003fe6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <prvSwitchTimerLists+0xc0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <prvSwitchTimerLists+0xc0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fa8f 	bl	8002490 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02e      	beq.n	8003fe6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90e      	bls.n	8003fb8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fa6:	4b19      	ldr	r3, [pc, #100]	; (800400c <prvSwitchTimerLists+0xc0>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7fe fa34 	bl	800241e <vListInsert>
 8003fb6:	e016      	b.n	8003fe6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fd7c 	bl	8003ac0 <xTimerGenericCommand>
 8003fc8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	603b      	str	r3, [r7, #0]
    }
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <prvSwitchTimerLists+0xc0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1b1      	bne.n	8003f54 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <prvSwitchTimerLists+0xc0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <prvSwitchTimerLists+0xc4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <prvSwitchTimerLists+0xc0>)
 8003ffc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ffe:	4a04      	ldr	r2, [pc, #16]	; (8004010 <prvSwitchTimerLists+0xc4>)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	6013      	str	r3, [r2, #0]
    }
 8004004:	bf00      	nop
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	2000024c 	.word	0x2000024c
 8004010:	20000250 	.word	0x20000250

08004014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004018:	f000 f95e 	bl	80042d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800401c:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvCheckForValidListAndQueue+0x54>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11d      	bne.n	8004060 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004024:	4811      	ldr	r0, [pc, #68]	; (800406c <prvCheckForValidListAndQueue+0x58>)
 8004026:	f7fe f9a9 	bl	800237c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800402a:	4811      	ldr	r0, [pc, #68]	; (8004070 <prvCheckForValidListAndQueue+0x5c>)
 800402c:	f7fe f9a6 	bl	800237c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <prvCheckForValidListAndQueue+0x60>)
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <prvCheckForValidListAndQueue+0x58>)
 8004034:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <prvCheckForValidListAndQueue+0x64>)
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <prvCheckForValidListAndQueue+0x5c>)
 800403a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800403c:	2200      	movs	r2, #0
 800403e:	210c      	movs	r1, #12
 8004040:	200a      	movs	r0, #10
 8004042:	f7fe faaa 	bl	800259a <xQueueGenericCreate>
 8004046:	4603      	mov	r3, r0
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <prvCheckForValidListAndQueue+0x54>)
 800404a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <prvCheckForValidListAndQueue+0x54>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <prvCheckForValidListAndQueue+0x54>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4908      	ldr	r1, [pc, #32]	; (800407c <prvCheckForValidListAndQueue+0x68>)
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fe94 	bl	8002d88 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004060:	f000 f96a 	bl	8004338 <vPortExitCritical>
    }
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000254 	.word	0x20000254
 800406c:	20000224 	.word	0x20000224
 8004070:	20000238 	.word	0x20000238
 8004074:	2000024c 	.word	0x2000024c
 8004078:	20000250 	.word	0x20000250
 800407c:	0800540c 	.word	0x0800540c

08004080 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b04      	subs	r3, #4
 8004090:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004098:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b04      	subs	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f023 0201 	bic.w	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <pxPortInitialiseStack+0x64>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b14      	subs	r3, #20
 80040ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b04      	subs	r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f06f 0202 	mvn.w	r2, #2
 80040ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b20      	subs	r3, #32
 80040d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	080040e9 	.word	0x080040e9

080040e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <prvTaskExitError+0x54>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d00a      	beq.n	8004112 <prvTaskExitError+0x2a>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60fb      	str	r3, [r7, #12]
    }
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <prvTaskExitError+0x28>
        __asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	60bb      	str	r3, [r7, #8]
    }
 8004124:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004126:	bf00      	nop
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0fc      	beq.n	8004128 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800412e:	bf00      	nop
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000010 	.word	0x20000010

08004140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <pxCurrentTCBConst2>)
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	6808      	ldr	r0, [r1, #0]
 8004146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	f380 8809 	msr	PSP, r0
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8811 	msr	BASEPRI, r0
 800415a:	4770      	bx	lr
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst2>:
 8004160:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004168:	4808      	ldr	r0, [pc, #32]	; (800418c <prvPortStartFirstTask+0x24>)
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	6800      	ldr	r0, [r0, #0]
 800416e:	f380 8808 	msr	MSP, r0
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8814 	msr	CONTROL, r0
 800417a:	b662      	cpsie	i
 800417c:	b661      	cpsie	f
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	df00      	svc	0
 8004188:	bf00      	nop
 800418a:	0000      	.short	0x0000
 800418c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop

08004194 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <xPortStartScheduler+0x120>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a46      	ldr	r2, [pc, #280]	; (80042b8 <xPortStartScheduler+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10a      	bne.n	80041ba <xPortStartScheduler+0x26>
        __asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	613b      	str	r3, [r7, #16]
    }
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041ba:	4b3e      	ldr	r3, [pc, #248]	; (80042b4 <xPortStartScheduler+0x120>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a3f      	ldr	r2, [pc, #252]	; (80042bc <xPortStartScheduler+0x128>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10a      	bne.n	80041da <xPortStartScheduler+0x46>
        __asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	60fb      	str	r3, [r7, #12]
    }
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041da:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <xPortStartScheduler+0x12c>)
 80041dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	22ff      	movs	r2, #255	; 0xff
 80041ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <xPortStartScheduler+0x130>)
 8004200:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <xPortStartScheduler+0x134>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004208:	e009      	b.n	800421e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <xPortStartScheduler+0x134>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <xPortStartScheduler+0x134>)
 8004212:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d0ef      	beq.n	800420a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800422a:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <xPortStartScheduler+0x134>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1c3 0307 	rsb	r3, r3, #7
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00a      	beq.n	800424c <xPortStartScheduler+0xb8>
        __asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60bb      	str	r3, [r7, #8]
    }
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <xPortStartScheduler+0x134>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <xPortStartScheduler+0x134>)
 8004254:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <xPortStartScheduler+0x134>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800425e:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <xPortStartScheduler+0x134>)
 8004260:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <xPortStartScheduler+0x138>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <xPortStartScheduler+0x138>)
 8004270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004274:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <xPortStartScheduler+0x138>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a14      	ldr	r2, [pc, #80]	; (80042cc <xPortStartScheduler+0x138>)
 800427c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004280:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004282:	f000 f8db 	bl	800443c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <xPortStartScheduler+0x13c>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800428c:	f000 f8fa 	bl	8004484 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <xPortStartScheduler+0x140>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0f      	ldr	r2, [pc, #60]	; (80042d4 <xPortStartScheduler+0x140>)
 8004296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800429a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800429c:	f7ff ff64 	bl	8004168 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042a0:	f7ff f89c 	bl	80033dc <vTaskSwitchContext>
    prvTaskExitError();
 80042a4:	f7ff ff20 	bl	80040e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00
 80042b8:	410fc271 	.word	0x410fc271
 80042bc:	410fc270 	.word	0x410fc270
 80042c0:	e000e400 	.word	0xe000e400
 80042c4:	20000260 	.word	0x20000260
 80042c8:	20000264 	.word	0x20000264
 80042cc:	e000ed20 	.word	0xe000ed20
 80042d0:	20000010 	.word	0x20000010
 80042d4:	e000ef34 	.word	0xe000ef34

080042d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
        __asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
    }
 80042f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <vPortEnterCritical+0x58>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <vPortEnterCritical+0x58>)
 80042fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <vPortEnterCritical+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10f      	bne.n	8004324 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <vPortEnterCritical+0x5c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <vPortEnterCritical+0x4c>
        __asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	603b      	str	r3, [r7, #0]
    }
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <vPortEnterCritical+0x4a>
    }
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000010 	.word	0x20000010
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <vPortExitCritical+0x50>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <vPortExitCritical+0x24>
        __asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	607b      	str	r3, [r7, #4]
    }
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <vPortExitCritical+0x50>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3b01      	subs	r3, #1
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <vPortExitCritical+0x50>)
 8004364:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <vPortExitCritical+0x50>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <vPortExitCritical+0x42>
 800436e:	2300      	movs	r3, #0
 8004370:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f383 8811 	msr	BASEPRI, r3
    }
 8004378:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000010 	.word	0x20000010
 800438c:	00000000 	.word	0x00000000

08004390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004390:	f3ef 8009 	mrs	r0, PSP
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <pxCurrentTCBConst>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f01e 0f10 	tst.w	lr, #16
 80043a0:	bf08      	it	eq
 80043a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043b4:	f380 8811 	msr	BASEPRI, r0
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f7ff f80c 	bl	80033dc <vTaskSwitchContext>
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f380 8811 	msr	BASEPRI, r0
 80043cc:	bc09      	pop	{r0, r3}
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d6:	f01e 0f10 	tst.w	lr, #16
 80043da:	bf08      	it	eq
 80043dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043e0:	f380 8809 	msr	PSP, r0
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst>:
 80043f0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
        __asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
    }
 8004410:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004412:	f7fe ff4d 	bl	80032b0 <xTaskIncrementTick>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <SysTick_Handler+0x40>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f383 8811 	msr	BASEPRI, r3
    }
 800442e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <vPortSetupTimerInterrupt+0x38>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <vPortSetupTimerInterrupt+0x3c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <vPortSetupTimerInterrupt+0x40>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	4a09      	ldr	r2, [pc, #36]	; (8004480 <vPortSetupTimerInterrupt+0x44>)
 800445a:	3b01      	subs	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e010 	.word	0xe000e010
 8004474:	e000e018 	.word	0xe000e018
 8004478:	20000000 	.word	0x20000000
 800447c:	10624dd3 	.word	0x10624dd3
 8004480:	e000e014 	.word	0xe000e014

08004484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004494 <vPortEnableVFP+0x10>
 8004488:	6801      	ldr	r1, [r0, #0]
 800448a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800448e:	6001      	str	r1, [r0, #0]
 8004490:	4770      	bx	lr
 8004492:	0000      	.short	0x0000
 8004494:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop

0800449c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80044a2:	f3ef 8305 	mrs	r3, IPSR
 80044a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d914      	bls.n	80044d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <vPortValidateInterruptPriority+0x70>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <vPortValidateInterruptPriority+0x74>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	7afa      	ldrb	r2, [r7, #11]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d20a      	bcs.n	80044d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
    }
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <vPortValidateInterruptPriority+0x78>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <vPortValidateInterruptPriority+0x7c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d90a      	bls.n	80044fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	603b      	str	r3, [r7, #0]
    }
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <vPortValidateInterruptPriority+0x60>
    }
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e3f0 	.word	0xe000e3f0
 8004510:	20000260 	.word	0x20000260
 8004514:	e000ed0c 	.word	0xe000ed0c
 8004518:	20000264 	.word	0x20000264

0800451c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004528:	f7fe fe16 	bl	8003158 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800452c:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <pvPortMalloc+0x1a8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004534:	f000 f934 	bl	80047a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004538:	4b63      	ldr	r3, [pc, #396]	; (80046c8 <pvPortMalloc+0x1ac>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 80a7 	bne.w	8004694 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02d      	beq.n	80045a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800454c:	2208      	movs	r2, #8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d227      	bcs.n	80045a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004558:	2208      	movs	r2, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d021      	beq.n	80045ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	3308      	adds	r3, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d214      	bcs.n	80045a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	3308      	adds	r3, #8
 8004580:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	2b00      	cmp	r3, #0
 800458a:	d010      	beq.n	80045ae <pvPortMalloc+0x92>
        __asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	617b      	str	r3, [r7, #20]
    }
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a6:	e002      	b.n	80045ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	e000      	b.n	80045b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d06e      	beq.n	8004694 <pvPortMalloc+0x178>
 80045b6:	4b45      	ldr	r3, [pc, #276]	; (80046cc <pvPortMalloc+0x1b0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d869      	bhi.n	8004694 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045c0:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <pvPortMalloc+0x1b4>)
 80045c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045c4:	4b42      	ldr	r3, [pc, #264]	; (80046d0 <pvPortMalloc+0x1b4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ca:	e004      	b.n	80045d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d903      	bls.n	80045e8 <pvPortMalloc+0xcc>
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f1      	bne.n	80045cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <pvPortMalloc+0x1a8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d050      	beq.n	8004694 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2208      	movs	r2, #8
 80045f8:	4413      	add	r3, r2
 80045fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	2308      	movs	r3, #8
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	429a      	cmp	r2, r3
 8004612:	d91f      	bls.n	8004654 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <pvPortMalloc+0x120>
        __asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	613b      	str	r3, [r7, #16]
    }
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800464e:	69b8      	ldr	r0, [r7, #24]
 8004650:	f000 f908 	bl	8004864 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <pvPortMalloc+0x1b0>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <pvPortMalloc+0x1b0>)
 8004660:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <pvPortMalloc+0x1b0>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <pvPortMalloc+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d203      	bcs.n	8004676 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <pvPortMalloc+0x1b0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <pvPortMalloc+0x1b8>)
 8004674:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <pvPortMalloc+0x1ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	431a      	orrs	r2, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <pvPortMalloc+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <pvPortMalloc+0x1bc>)
 8004692:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004694:	f7fe fd6e 	bl	8003174 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <pvPortMalloc+0x19c>
        __asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60fb      	str	r3, [r7, #12]
    }
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80046b8:	69fb      	ldr	r3, [r7, #28]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20012e70 	.word	0x20012e70
 80046c8:	20012e84 	.word	0x20012e84
 80046cc:	20012e74 	.word	0x20012e74
 80046d0:	20012e68 	.word	0x20012e68
 80046d4:	20012e78 	.word	0x20012e78
 80046d8:	20012e7c 	.word	0x20012e7c

080046dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d04d      	beq.n	800478a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80046ee:	2308      	movs	r3, #8
 80046f0:	425b      	negs	r3, r3
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4413      	add	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <vPortFree+0xb8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <vPortFree+0x44>
        __asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60fb      	str	r3, [r7, #12]
    }
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <vPortFree+0x62>
        __asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60bb      	str	r3, [r7, #8]
    }
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <vPortFree+0xb8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01e      	beq.n	800478a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11a      	bne.n	800478a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <vPortFree+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	43db      	mvns	r3, r3
 800475e:	401a      	ands	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004764:	f7fe fcf8 	bl	8003158 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortFree+0xbc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4413      	add	r3, r2
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <vPortFree+0xbc>)
 8004774:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004776:	6938      	ldr	r0, [r7, #16]
 8004778:	f000 f874 	bl	8004864 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <vPortFree+0xc0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a06      	ldr	r2, [pc, #24]	; (800479c <vPortFree+0xc0>)
 8004784:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004786:	f7fe fcf5 	bl	8003174 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20012e84 	.word	0x20012e84
 8004798:	20012e74 	.word	0x20012e74
 800479c:	20012e80 	.word	0x20012e80

080047a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80047aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <prvHeapInit+0xac>)
 80047ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3307      	adds	r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	4a1f      	ldr	r2, [pc, #124]	; (800484c <prvHeapInit+0xac>)
 80047d0:	4413      	add	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <prvHeapInit+0xb0>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047de:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <prvHeapInit+0xb0>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4413      	add	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047ec:	2208      	movs	r2, #8
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0307 	bic.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a15      	ldr	r2, [pc, #84]	; (8004854 <prvHeapInit+0xb4>)
 8004800:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <prvHeapInit+0xb4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <prvHeapInit+0xb4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <prvHeapInit+0xb4>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <prvHeapInit+0xb8>)
 800482e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a09      	ldr	r2, [pc, #36]	; (800485c <prvHeapInit+0xbc>)
 8004836:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <prvHeapInit+0xc0>)
 800483a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800483e:	601a      	str	r2, [r3, #0]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	20000268 	.word	0x20000268
 8004850:	20012e68 	.word	0x20012e68
 8004854:	20012e70 	.word	0x20012e70
 8004858:	20012e78 	.word	0x20012e78
 800485c:	20012e74 	.word	0x20012e74
 8004860:	20012e84 	.word	0x20012e84

08004864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800486c:	4b28      	ldr	r3, [pc, #160]	; (8004910 <prvInsertBlockIntoFreeList+0xac>)
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e002      	b.n	8004878 <prvInsertBlockIntoFreeList+0x14>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d8f7      	bhi.n	8004872 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d108      	bne.n	80048a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d118      	bne.n	80048ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <prvInsertBlockIntoFreeList+0xb0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00d      	beq.n	80048e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e008      	b.n	80048f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <prvInsertBlockIntoFreeList+0xb0>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e003      	b.n	80048f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d002      	beq.n	8004902 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20012e68 	.word	0x20012e68
 8004914:	20012e70 	.word	0x20012e70

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f000 fd3a 	bl	80053a4 <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08005498 	.word	0x08005498
 8004954:	08005498 	.word	0x08005498
 8004958:	08005498 	.word	0x08005498
 800495c:	0800549c 	.word	0x0800549c

08004960 <memcpy>:
 8004960:	440a      	add	r2, r1
 8004962:	4291      	cmp	r1, r2
 8004964:	f100 33ff 	add.w	r3, r0, #4294967295
 8004968:	d100      	bne.n	800496c <memcpy+0xc>
 800496a:	4770      	bx	lr
 800496c:	b510      	push	{r4, lr}
 800496e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004976:	4291      	cmp	r1, r2
 8004978:	d1f9      	bne.n	800496e <memcpy+0xe>
 800497a:	bd10      	pop	{r4, pc}

0800497c <memset>:
 800497c:	4402      	add	r2, r0
 800497e:	4603      	mov	r3, r0
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	f803 1b01 	strb.w	r1, [r3], #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <_puts_r>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	460e      	mov	r6, r1
 8004990:	4605      	mov	r5, r0
 8004992:	b118      	cbz	r0, 800499c <_puts_r+0x10>
 8004994:	6983      	ldr	r3, [r0, #24]
 8004996:	b90b      	cbnz	r3, 800499c <_puts_r+0x10>
 8004998:	f000 fa48 	bl	8004e2c <__sinit>
 800499c:	69ab      	ldr	r3, [r5, #24]
 800499e:	68ac      	ldr	r4, [r5, #8]
 80049a0:	b913      	cbnz	r3, 80049a8 <_puts_r+0x1c>
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 fa42 	bl	8004e2c <__sinit>
 80049a8:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <_puts_r+0xd0>)
 80049aa:	429c      	cmp	r4, r3
 80049ac:	d120      	bne.n	80049f0 <_puts_r+0x64>
 80049ae:	686c      	ldr	r4, [r5, #4]
 80049b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049b2:	07db      	lsls	r3, r3, #31
 80049b4:	d405      	bmi.n	80049c2 <_puts_r+0x36>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	0598      	lsls	r0, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_puts_r+0x36>
 80049bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049be:	f000 fad3 	bl	8004f68 <__retarget_lock_acquire_recursive>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	0719      	lsls	r1, r3, #28
 80049c6:	d51d      	bpl.n	8004a04 <_puts_r+0x78>
 80049c8:	6923      	ldr	r3, [r4, #16]
 80049ca:	b1db      	cbz	r3, 8004a04 <_puts_r+0x78>
 80049cc:	3e01      	subs	r6, #1
 80049ce:	68a3      	ldr	r3, [r4, #8]
 80049d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049d4:	3b01      	subs	r3, #1
 80049d6:	60a3      	str	r3, [r4, #8]
 80049d8:	bb39      	cbnz	r1, 8004a2a <_puts_r+0x9e>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da38      	bge.n	8004a50 <_puts_r+0xc4>
 80049de:	4622      	mov	r2, r4
 80049e0:	210a      	movs	r1, #10
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f848 	bl	8004a78 <__swbuf_r>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d011      	beq.n	8004a10 <_puts_r+0x84>
 80049ec:	250a      	movs	r5, #10
 80049ee:	e011      	b.n	8004a14 <_puts_r+0x88>
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <_puts_r+0xd4>)
 80049f2:	429c      	cmp	r4, r3
 80049f4:	d101      	bne.n	80049fa <_puts_r+0x6e>
 80049f6:	68ac      	ldr	r4, [r5, #8]
 80049f8:	e7da      	b.n	80049b0 <_puts_r+0x24>
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <_puts_r+0xd8>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	bf08      	it	eq
 8004a00:	68ec      	ldreq	r4, [r5, #12]
 8004a02:	e7d5      	b.n	80049b0 <_puts_r+0x24>
 8004a04:	4621      	mov	r1, r4
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 f888 	bl	8004b1c <__swsetup_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0dd      	beq.n	80049cc <_puts_r+0x40>
 8004a10:	f04f 35ff 	mov.w	r5, #4294967295
 8004a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a16:	07da      	lsls	r2, r3, #31
 8004a18:	d405      	bmi.n	8004a26 <_puts_r+0x9a>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	059b      	lsls	r3, r3, #22
 8004a1e:	d402      	bmi.n	8004a26 <_puts_r+0x9a>
 8004a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a22:	f000 faa2 	bl	8004f6a <__retarget_lock_release_recursive>
 8004a26:	4628      	mov	r0, r5
 8004a28:	bd70      	pop	{r4, r5, r6, pc}
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da04      	bge.n	8004a38 <_puts_r+0xac>
 8004a2e:	69a2      	ldr	r2, [r4, #24]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	dc06      	bgt.n	8004a42 <_puts_r+0xb6>
 8004a34:	290a      	cmp	r1, #10
 8004a36:	d004      	beq.n	8004a42 <_puts_r+0xb6>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	6022      	str	r2, [r4, #0]
 8004a3e:	7019      	strb	r1, [r3, #0]
 8004a40:	e7c5      	b.n	80049ce <_puts_r+0x42>
 8004a42:	4622      	mov	r2, r4
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 f817 	bl	8004a78 <__swbuf_r>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d1bf      	bne.n	80049ce <_puts_r+0x42>
 8004a4e:	e7df      	b.n	8004a10 <_puts_r+0x84>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	250a      	movs	r5, #10
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	6022      	str	r2, [r4, #0]
 8004a58:	701d      	strb	r5, [r3, #0]
 8004a5a:	e7db      	b.n	8004a14 <_puts_r+0x88>
 8004a5c:	08005450 	.word	0x08005450
 8004a60:	08005470 	.word	0x08005470
 8004a64:	08005430 	.word	0x08005430

08004a68 <puts>:
 8004a68:	4b02      	ldr	r3, [pc, #8]	; (8004a74 <puts+0xc>)
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f7ff bf8d 	b.w	800498c <_puts_r>
 8004a72:	bf00      	nop
 8004a74:	20000014 	.word	0x20000014

08004a78 <__swbuf_r>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	460e      	mov	r6, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4605      	mov	r5, r0
 8004a80:	b118      	cbz	r0, 8004a8a <__swbuf_r+0x12>
 8004a82:	6983      	ldr	r3, [r0, #24]
 8004a84:	b90b      	cbnz	r3, 8004a8a <__swbuf_r+0x12>
 8004a86:	f000 f9d1 	bl	8004e2c <__sinit>
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <__swbuf_r+0x98>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	d12b      	bne.n	8004ae8 <__swbuf_r+0x70>
 8004a90:	686c      	ldr	r4, [r5, #4]
 8004a92:	69a3      	ldr	r3, [r4, #24]
 8004a94:	60a3      	str	r3, [r4, #8]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	071a      	lsls	r2, r3, #28
 8004a9a:	d52f      	bpl.n	8004afc <__swbuf_r+0x84>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	b36b      	cbz	r3, 8004afc <__swbuf_r+0x84>
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	1ac0      	subs	r0, r0, r3
 8004aa6:	6963      	ldr	r3, [r4, #20]
 8004aa8:	b2f6      	uxtb	r6, r6
 8004aaa:	4283      	cmp	r3, r0
 8004aac:	4637      	mov	r7, r6
 8004aae:	dc04      	bgt.n	8004aba <__swbuf_r+0x42>
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f926 	bl	8004d04 <_fflush_r>
 8004ab8:	bb30      	cbnz	r0, 8004b08 <__swbuf_r+0x90>
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	60a3      	str	r3, [r4, #8]
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	701e      	strb	r6, [r3, #0]
 8004ac8:	6963      	ldr	r3, [r4, #20]
 8004aca:	3001      	adds	r0, #1
 8004acc:	4283      	cmp	r3, r0
 8004ace:	d004      	beq.n	8004ada <__swbuf_r+0x62>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	07db      	lsls	r3, r3, #31
 8004ad4:	d506      	bpl.n	8004ae4 <__swbuf_r+0x6c>
 8004ad6:	2e0a      	cmp	r6, #10
 8004ad8:	d104      	bne.n	8004ae4 <__swbuf_r+0x6c>
 8004ada:	4621      	mov	r1, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 f911 	bl	8004d04 <_fflush_r>
 8004ae2:	b988      	cbnz	r0, 8004b08 <__swbuf_r+0x90>
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <__swbuf_r+0x9c>)
 8004aea:	429c      	cmp	r4, r3
 8004aec:	d101      	bne.n	8004af2 <__swbuf_r+0x7a>
 8004aee:	68ac      	ldr	r4, [r5, #8]
 8004af0:	e7cf      	b.n	8004a92 <__swbuf_r+0x1a>
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <__swbuf_r+0xa0>)
 8004af4:	429c      	cmp	r4, r3
 8004af6:	bf08      	it	eq
 8004af8:	68ec      	ldreq	r4, [r5, #12]
 8004afa:	e7ca      	b.n	8004a92 <__swbuf_r+0x1a>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 f80c 	bl	8004b1c <__swsetup_r>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0cb      	beq.n	8004aa0 <__swbuf_r+0x28>
 8004b08:	f04f 37ff 	mov.w	r7, #4294967295
 8004b0c:	e7ea      	b.n	8004ae4 <__swbuf_r+0x6c>
 8004b0e:	bf00      	nop
 8004b10:	08005450 	.word	0x08005450
 8004b14:	08005470 	.word	0x08005470
 8004b18:	08005430 	.word	0x08005430

08004b1c <__swsetup_r>:
 8004b1c:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <__swsetup_r+0xcc>)
 8004b1e:	b570      	push	{r4, r5, r6, lr}
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	4606      	mov	r6, r0
 8004b24:	460c      	mov	r4, r1
 8004b26:	b125      	cbz	r5, 8004b32 <__swsetup_r+0x16>
 8004b28:	69ab      	ldr	r3, [r5, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__swsetup_r+0x16>
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 f97d 	bl	8004e2c <__sinit>
 8004b32:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <__swsetup_r+0xd0>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	d10f      	bne.n	8004b58 <__swsetup_r+0x3c>
 8004b38:	686c      	ldr	r4, [r5, #4]
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b40:	0719      	lsls	r1, r3, #28
 8004b42:	d42c      	bmi.n	8004b9e <__swsetup_r+0x82>
 8004b44:	06dd      	lsls	r5, r3, #27
 8004b46:	d411      	bmi.n	8004b6c <__swsetup_r+0x50>
 8004b48:	2309      	movs	r3, #9
 8004b4a:	6033      	str	r3, [r6, #0]
 8004b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e03e      	b.n	8004bd6 <__swsetup_r+0xba>
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <__swsetup_r+0xd4>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d101      	bne.n	8004b62 <__swsetup_r+0x46>
 8004b5e:	68ac      	ldr	r4, [r5, #8]
 8004b60:	e7eb      	b.n	8004b3a <__swsetup_r+0x1e>
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <__swsetup_r+0xd8>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	bf08      	it	eq
 8004b68:	68ec      	ldreq	r4, [r5, #12]
 8004b6a:	e7e6      	b.n	8004b3a <__swsetup_r+0x1e>
 8004b6c:	0758      	lsls	r0, r3, #29
 8004b6e:	d512      	bpl.n	8004b96 <__swsetup_r+0x7a>
 8004b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b72:	b141      	cbz	r1, 8004b86 <__swsetup_r+0x6a>
 8004b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	d002      	beq.n	8004b82 <__swsetup_r+0x66>
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 fa5b 	bl	8005038 <_free_r>
 8004b82:	2300      	movs	r3, #0
 8004b84:	6363      	str	r3, [r4, #52]	; 0x34
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	b94b      	cbnz	r3, 8004bb6 <__swsetup_r+0x9a>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d003      	beq.n	8004bb6 <__swsetup_r+0x9a>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f000 fa01 	bl	8004fb8 <__smakebuf_r>
 8004bb6:	89a0      	ldrh	r0, [r4, #12]
 8004bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bbc:	f010 0301 	ands.w	r3, r0, #1
 8004bc0:	d00a      	beq.n	8004bd8 <__swsetup_r+0xbc>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6963      	ldr	r3, [r4, #20]
 8004bc8:	425b      	negs	r3, r3
 8004bca:	61a3      	str	r3, [r4, #24]
 8004bcc:	6923      	ldr	r3, [r4, #16]
 8004bce:	b943      	cbnz	r3, 8004be2 <__swsetup_r+0xc6>
 8004bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bd4:	d1ba      	bne.n	8004b4c <__swsetup_r+0x30>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	0781      	lsls	r1, r0, #30
 8004bda:	bf58      	it	pl
 8004bdc:	6963      	ldrpl	r3, [r4, #20]
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	e7f4      	b.n	8004bcc <__swsetup_r+0xb0>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e7f7      	b.n	8004bd6 <__swsetup_r+0xba>
 8004be6:	bf00      	nop
 8004be8:	20000014 	.word	0x20000014
 8004bec:	08005450 	.word	0x08005450
 8004bf0:	08005470 	.word	0x08005470
 8004bf4:	08005430 	.word	0x08005430

08004bf8 <__sflush_r>:
 8004bf8:	898a      	ldrh	r2, [r1, #12]
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	4605      	mov	r5, r0
 8004c00:	0710      	lsls	r0, r2, #28
 8004c02:	460c      	mov	r4, r1
 8004c04:	d458      	bmi.n	8004cb8 <__sflush_r+0xc0>
 8004c06:	684b      	ldr	r3, [r1, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	dc05      	bgt.n	8004c18 <__sflush_r+0x20>
 8004c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dc02      	bgt.n	8004c18 <__sflush_r+0x20>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	d0f9      	beq.n	8004c12 <__sflush_r+0x1a>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c24:	682f      	ldr	r7, [r5, #0]
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	d032      	beq.n	8004c90 <__sflush_r+0x98>
 8004c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	075a      	lsls	r2, r3, #29
 8004c30:	d505      	bpl.n	8004c3e <__sflush_r+0x46>
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	1ac0      	subs	r0, r0, r3
 8004c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c38:	b10b      	cbz	r3, 8004c3e <__sflush_r+0x46>
 8004c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c3c:	1ac0      	subs	r0, r0, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4602      	mov	r2, r0
 8004c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c44:	6a21      	ldr	r1, [r4, #32]
 8004c46:	4628      	mov	r0, r5
 8004c48:	47b0      	blx	r6
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	d106      	bne.n	8004c5e <__sflush_r+0x66>
 8004c50:	6829      	ldr	r1, [r5, #0]
 8004c52:	291d      	cmp	r1, #29
 8004c54:	d82c      	bhi.n	8004cb0 <__sflush_r+0xb8>
 8004c56:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <__sflush_r+0x108>)
 8004c58:	40ca      	lsrs	r2, r1
 8004c5a:	07d6      	lsls	r6, r2, #31
 8004c5c:	d528      	bpl.n	8004cb0 <__sflush_r+0xb8>
 8004c5e:	2200      	movs	r2, #0
 8004c60:	6062      	str	r2, [r4, #4]
 8004c62:	04d9      	lsls	r1, r3, #19
 8004c64:	6922      	ldr	r2, [r4, #16]
 8004c66:	6022      	str	r2, [r4, #0]
 8004c68:	d504      	bpl.n	8004c74 <__sflush_r+0x7c>
 8004c6a:	1c42      	adds	r2, r0, #1
 8004c6c:	d101      	bne.n	8004c72 <__sflush_r+0x7a>
 8004c6e:	682b      	ldr	r3, [r5, #0]
 8004c70:	b903      	cbnz	r3, 8004c74 <__sflush_r+0x7c>
 8004c72:	6560      	str	r0, [r4, #84]	; 0x54
 8004c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c76:	602f      	str	r7, [r5, #0]
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d0ca      	beq.n	8004c12 <__sflush_r+0x1a>
 8004c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c80:	4299      	cmp	r1, r3
 8004c82:	d002      	beq.n	8004c8a <__sflush_r+0x92>
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f9d7 	bl	8005038 <_free_r>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c8e:	e7c1      	b.n	8004c14 <__sflush_r+0x1c>
 8004c90:	6a21      	ldr	r1, [r4, #32]
 8004c92:	2301      	movs	r3, #1
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b0      	blx	r6
 8004c98:	1c41      	adds	r1, r0, #1
 8004c9a:	d1c7      	bne.n	8004c2c <__sflush_r+0x34>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0c4      	beq.n	8004c2c <__sflush_r+0x34>
 8004ca2:	2b1d      	cmp	r3, #29
 8004ca4:	d001      	beq.n	8004caa <__sflush_r+0xb2>
 8004ca6:	2b16      	cmp	r3, #22
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0xb6>
 8004caa:	602f      	str	r7, [r5, #0]
 8004cac:	e7b1      	b.n	8004c12 <__sflush_r+0x1a>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	e7ad      	b.n	8004c14 <__sflush_r+0x1c>
 8004cb8:	690f      	ldr	r7, [r1, #16]
 8004cba:	2f00      	cmp	r7, #0
 8004cbc:	d0a9      	beq.n	8004c12 <__sflush_r+0x1a>
 8004cbe:	0793      	lsls	r3, r2, #30
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	bf08      	it	eq
 8004cc4:	694b      	ldreq	r3, [r1, #20]
 8004cc6:	600f      	str	r7, [r1, #0]
 8004cc8:	bf18      	it	ne
 8004cca:	2300      	movne	r3, #0
 8004ccc:	eba6 0807 	sub.w	r8, r6, r7
 8004cd0:	608b      	str	r3, [r1, #8]
 8004cd2:	f1b8 0f00 	cmp.w	r8, #0
 8004cd6:	dd9c      	ble.n	8004c12 <__sflush_r+0x1a>
 8004cd8:	6a21      	ldr	r1, [r4, #32]
 8004cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cdc:	4643      	mov	r3, r8
 8004cde:	463a      	mov	r2, r7
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b0      	blx	r6
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	dc06      	bgt.n	8004cf6 <__sflush_r+0xfe>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	e78e      	b.n	8004c14 <__sflush_r+0x1c>
 8004cf6:	4407      	add	r7, r0
 8004cf8:	eba8 0800 	sub.w	r8, r8, r0
 8004cfc:	e7e9      	b.n	8004cd2 <__sflush_r+0xda>
 8004cfe:	bf00      	nop
 8004d00:	20400001 	.word	0x20400001

08004d04 <_fflush_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	4605      	mov	r5, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b913      	cbnz	r3, 8004d14 <_fflush_r+0x10>
 8004d0e:	2500      	movs	r5, #0
 8004d10:	4628      	mov	r0, r5
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	b118      	cbz	r0, 8004d1e <_fflush_r+0x1a>
 8004d16:	6983      	ldr	r3, [r0, #24]
 8004d18:	b90b      	cbnz	r3, 8004d1e <_fflush_r+0x1a>
 8004d1a:	f000 f887 	bl	8004e2c <__sinit>
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <_fflush_r+0x6c>)
 8004d20:	429c      	cmp	r4, r3
 8004d22:	d11b      	bne.n	8004d5c <_fflush_r+0x58>
 8004d24:	686c      	ldr	r4, [r5, #4]
 8004d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ef      	beq.n	8004d0e <_fflush_r+0xa>
 8004d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d30:	07d0      	lsls	r0, r2, #31
 8004d32:	d404      	bmi.n	8004d3e <_fflush_r+0x3a>
 8004d34:	0599      	lsls	r1, r3, #22
 8004d36:	d402      	bmi.n	8004d3e <_fflush_r+0x3a>
 8004d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d3a:	f000 f915 	bl	8004f68 <__retarget_lock_acquire_recursive>
 8004d3e:	4628      	mov	r0, r5
 8004d40:	4621      	mov	r1, r4
 8004d42:	f7ff ff59 	bl	8004bf8 <__sflush_r>
 8004d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d48:	07da      	lsls	r2, r3, #31
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	d4e0      	bmi.n	8004d10 <_fflush_r+0xc>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	059b      	lsls	r3, r3, #22
 8004d52:	d4dd      	bmi.n	8004d10 <_fflush_r+0xc>
 8004d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d56:	f000 f908 	bl	8004f6a <__retarget_lock_release_recursive>
 8004d5a:	e7d9      	b.n	8004d10 <_fflush_r+0xc>
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <_fflush_r+0x70>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	d101      	bne.n	8004d66 <_fflush_r+0x62>
 8004d62:	68ac      	ldr	r4, [r5, #8]
 8004d64:	e7df      	b.n	8004d26 <_fflush_r+0x22>
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <_fflush_r+0x74>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	bf08      	it	eq
 8004d6c:	68ec      	ldreq	r4, [r5, #12]
 8004d6e:	e7da      	b.n	8004d26 <_fflush_r+0x22>
 8004d70:	08005450 	.word	0x08005450
 8004d74:	08005470 	.word	0x08005470
 8004d78:	08005430 	.word	0x08005430

08004d7c <std>:
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	b510      	push	{r4, lr}
 8004d80:	4604      	mov	r4, r0
 8004d82:	e9c0 3300 	strd	r3, r3, [r0]
 8004d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d8a:	6083      	str	r3, [r0, #8]
 8004d8c:	8181      	strh	r1, [r0, #12]
 8004d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d90:	81c2      	strh	r2, [r0, #14]
 8004d92:	6183      	str	r3, [r0, #24]
 8004d94:	4619      	mov	r1, r3
 8004d96:	2208      	movs	r2, #8
 8004d98:	305c      	adds	r0, #92	; 0x5c
 8004d9a:	f7ff fdef 	bl	800497c <memset>
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <std+0x38>)
 8004da0:	6263      	str	r3, [r4, #36]	; 0x24
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <std+0x3c>)
 8004da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <std+0x40>)
 8004da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <std+0x44>)
 8004dac:	6224      	str	r4, [r4, #32]
 8004dae:	6323      	str	r3, [r4, #48]	; 0x30
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	bf00      	nop
 8004db4:	08005219 	.word	0x08005219
 8004db8:	0800523b 	.word	0x0800523b
 8004dbc:	08005273 	.word	0x08005273
 8004dc0:	08005297 	.word	0x08005297

08004dc4 <_cleanup_r>:
 8004dc4:	4901      	ldr	r1, [pc, #4]	; (8004dcc <_cleanup_r+0x8>)
 8004dc6:	f000 b8af 	b.w	8004f28 <_fwalk_reent>
 8004dca:	bf00      	nop
 8004dcc:	08004d05 	.word	0x08004d05

08004dd0 <__sfmoreglue>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	2268      	movs	r2, #104	; 0x68
 8004dd4:	1e4d      	subs	r5, r1, #1
 8004dd6:	4355      	muls	r5, r2
 8004dd8:	460e      	mov	r6, r1
 8004dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dde:	f000 f997 	bl	8005110 <_malloc_r>
 8004de2:	4604      	mov	r4, r0
 8004de4:	b140      	cbz	r0, 8004df8 <__sfmoreglue+0x28>
 8004de6:	2100      	movs	r1, #0
 8004de8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dec:	300c      	adds	r0, #12
 8004dee:	60a0      	str	r0, [r4, #8]
 8004df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004df4:	f7ff fdc2 	bl	800497c <memset>
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}

08004dfc <__sfp_lock_acquire>:
 8004dfc:	4801      	ldr	r0, [pc, #4]	; (8004e04 <__sfp_lock_acquire+0x8>)
 8004dfe:	f000 b8b3 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8004e02:	bf00      	nop
 8004e04:	20012e89 	.word	0x20012e89

08004e08 <__sfp_lock_release>:
 8004e08:	4801      	ldr	r0, [pc, #4]	; (8004e10 <__sfp_lock_release+0x8>)
 8004e0a:	f000 b8ae 	b.w	8004f6a <__retarget_lock_release_recursive>
 8004e0e:	bf00      	nop
 8004e10:	20012e89 	.word	0x20012e89

08004e14 <__sinit_lock_acquire>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__sinit_lock_acquire+0x8>)
 8004e16:	f000 b8a7 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20012e8a 	.word	0x20012e8a

08004e20 <__sinit_lock_release>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__sinit_lock_release+0x8>)
 8004e22:	f000 b8a2 	b.w	8004f6a <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20012e8a 	.word	0x20012e8a

08004e2c <__sinit>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	4604      	mov	r4, r0
 8004e30:	f7ff fff0 	bl	8004e14 <__sinit_lock_acquire>
 8004e34:	69a3      	ldr	r3, [r4, #24]
 8004e36:	b11b      	cbz	r3, 8004e40 <__sinit+0x14>
 8004e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3c:	f7ff bff0 	b.w	8004e20 <__sinit_lock_release>
 8004e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e44:	6523      	str	r3, [r4, #80]	; 0x50
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <__sinit+0x68>)
 8004e48:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <__sinit+0x6c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	bf04      	itt	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	61a3      	streq	r3, [r4, #24]
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 f820 	bl	8004e9c <__sfp>
 8004e5c:	6060      	str	r0, [r4, #4]
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f000 f81c 	bl	8004e9c <__sfp>
 8004e64:	60a0      	str	r0, [r4, #8]
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 f818 	bl	8004e9c <__sfp>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	60e0      	str	r0, [r4, #12]
 8004e70:	2104      	movs	r1, #4
 8004e72:	6860      	ldr	r0, [r4, #4]
 8004e74:	f7ff ff82 	bl	8004d7c <std>
 8004e78:	68a0      	ldr	r0, [r4, #8]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	2109      	movs	r1, #9
 8004e7e:	f7ff ff7d 	bl	8004d7c <std>
 8004e82:	68e0      	ldr	r0, [r4, #12]
 8004e84:	2202      	movs	r2, #2
 8004e86:	2112      	movs	r1, #18
 8004e88:	f7ff ff78 	bl	8004d7c <std>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	61a3      	str	r3, [r4, #24]
 8004e90:	e7d2      	b.n	8004e38 <__sinit+0xc>
 8004e92:	bf00      	nop
 8004e94:	0800542c 	.word	0x0800542c
 8004e98:	08004dc5 	.word	0x08004dc5

08004e9c <__sfp>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	f7ff ffac 	bl	8004dfc <__sfp_lock_acquire>
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <__sfp+0x84>)
 8004ea6:	681e      	ldr	r6, [r3, #0]
 8004ea8:	69b3      	ldr	r3, [r6, #24]
 8004eaa:	b913      	cbnz	r3, 8004eb2 <__sfp+0x16>
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff ffbd 	bl	8004e2c <__sinit>
 8004eb2:	3648      	adds	r6, #72	; 0x48
 8004eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	d503      	bpl.n	8004ec4 <__sfp+0x28>
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	b30b      	cbz	r3, 8004f04 <__sfp+0x68>
 8004ec0:	6836      	ldr	r6, [r6, #0]
 8004ec2:	e7f7      	b.n	8004eb4 <__sfp+0x18>
 8004ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ec8:	b9d5      	cbnz	r5, 8004f00 <__sfp+0x64>
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <__sfp+0x88>)
 8004ecc:	60e3      	str	r3, [r4, #12]
 8004ece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ed4:	f000 f847 	bl	8004f66 <__retarget_lock_init_recursive>
 8004ed8:	f7ff ff96 	bl	8004e08 <__sfp_lock_release>
 8004edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ee4:	6025      	str	r5, [r4, #0]
 8004ee6:	61a5      	str	r5, [r4, #24]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	4629      	mov	r1, r5
 8004eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ef0:	f7ff fd44 	bl	800497c <memset>
 8004ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004efc:	4620      	mov	r0, r4
 8004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f00:	3468      	adds	r4, #104	; 0x68
 8004f02:	e7d9      	b.n	8004eb8 <__sfp+0x1c>
 8004f04:	2104      	movs	r1, #4
 8004f06:	4638      	mov	r0, r7
 8004f08:	f7ff ff62 	bl	8004dd0 <__sfmoreglue>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	6030      	str	r0, [r6, #0]
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d1d5      	bne.n	8004ec0 <__sfp+0x24>
 8004f14:	f7ff ff78 	bl	8004e08 <__sfp_lock_release>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	e7ee      	b.n	8004efc <__sfp+0x60>
 8004f1e:	bf00      	nop
 8004f20:	0800542c 	.word	0x0800542c
 8004f24:	ffff0001 	.word	0xffff0001

08004f28 <_fwalk_reent>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	4688      	mov	r8, r1
 8004f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f34:	2700      	movs	r7, #0
 8004f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f3e:	d505      	bpl.n	8004f4c <_fwalk_reent+0x24>
 8004f40:	6824      	ldr	r4, [r4, #0]
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	d1f7      	bne.n	8004f36 <_fwalk_reent+0xe>
 8004f46:	4638      	mov	r0, r7
 8004f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f4c:	89ab      	ldrh	r3, [r5, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d907      	bls.n	8004f62 <_fwalk_reent+0x3a>
 8004f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f56:	3301      	adds	r3, #1
 8004f58:	d003      	beq.n	8004f62 <_fwalk_reent+0x3a>
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	47c0      	blx	r8
 8004f60:	4307      	orrs	r7, r0
 8004f62:	3568      	adds	r5, #104	; 0x68
 8004f64:	e7e9      	b.n	8004f3a <_fwalk_reent+0x12>

08004f66 <__retarget_lock_init_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <__retarget_lock_acquire_recursive>:
 8004f68:	4770      	bx	lr

08004f6a <__retarget_lock_release_recursive>:
 8004f6a:	4770      	bx	lr

08004f6c <__swhatbuf_r>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	460e      	mov	r6, r1
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	2900      	cmp	r1, #0
 8004f76:	b096      	sub	sp, #88	; 0x58
 8004f78:	4614      	mov	r4, r2
 8004f7a:	461d      	mov	r5, r3
 8004f7c:	da08      	bge.n	8004f90 <__swhatbuf_r+0x24>
 8004f7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	061a      	lsls	r2, r3, #24
 8004f88:	d410      	bmi.n	8004fac <__swhatbuf_r+0x40>
 8004f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f8e:	e00e      	b.n	8004fae <__swhatbuf_r+0x42>
 8004f90:	466a      	mov	r2, sp
 8004f92:	f000 f9a7 	bl	80052e4 <_fstat_r>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	dbf1      	blt.n	8004f7e <__swhatbuf_r+0x12>
 8004f9a:	9a01      	ldr	r2, [sp, #4]
 8004f9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fa4:	425a      	negs	r2, r3
 8004fa6:	415a      	adcs	r2, r3
 8004fa8:	602a      	str	r2, [r5, #0]
 8004faa:	e7ee      	b.n	8004f8a <__swhatbuf_r+0x1e>
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	2000      	movs	r0, #0
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	b016      	add	sp, #88	; 0x58
 8004fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fb8 <__smakebuf_r>:
 8004fb8:	898b      	ldrh	r3, [r1, #12]
 8004fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fbc:	079d      	lsls	r5, r3, #30
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	d507      	bpl.n	8004fd4 <__smakebuf_r+0x1c>
 8004fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	6163      	str	r3, [r4, #20]
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	ab01      	add	r3, sp, #4
 8004fd6:	466a      	mov	r2, sp
 8004fd8:	f7ff ffc8 	bl	8004f6c <__swhatbuf_r>
 8004fdc:	9900      	ldr	r1, [sp, #0]
 8004fde:	4605      	mov	r5, r0
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f000 f895 	bl	8005110 <_malloc_r>
 8004fe6:	b948      	cbnz	r0, 8004ffc <__smakebuf_r+0x44>
 8004fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fec:	059a      	lsls	r2, r3, #22
 8004fee:	d4ef      	bmi.n	8004fd0 <__smakebuf_r+0x18>
 8004ff0:	f023 0303 	bic.w	r3, r3, #3
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	e7e3      	b.n	8004fc4 <__smakebuf_r+0xc>
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <__smakebuf_r+0x7c>)
 8004ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	6020      	str	r0, [r4, #0]
 8005004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	9b00      	ldr	r3, [sp, #0]
 800500c:	6163      	str	r3, [r4, #20]
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	6120      	str	r0, [r4, #16]
 8005012:	b15b      	cbz	r3, 800502c <__smakebuf_r+0x74>
 8005014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f975 	bl	8005308 <_isatty_r>
 800501e:	b128      	cbz	r0, 800502c <__smakebuf_r+0x74>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	89a0      	ldrh	r0, [r4, #12]
 800502e:	4305      	orrs	r5, r0
 8005030:	81a5      	strh	r5, [r4, #12]
 8005032:	e7cd      	b.n	8004fd0 <__smakebuf_r+0x18>
 8005034:	08004dc5 	.word	0x08004dc5

08005038 <_free_r>:
 8005038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800503a:	2900      	cmp	r1, #0
 800503c:	d044      	beq.n	80050c8 <_free_r+0x90>
 800503e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005042:	9001      	str	r0, [sp, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f1a1 0404 	sub.w	r4, r1, #4
 800504a:	bfb8      	it	lt
 800504c:	18e4      	addlt	r4, r4, r3
 800504e:	f000 f97d 	bl	800534c <__malloc_lock>
 8005052:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <_free_r+0x94>)
 8005054:	9801      	ldr	r0, [sp, #4]
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	b933      	cbnz	r3, 8005068 <_free_r+0x30>
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	b003      	add	sp, #12
 8005060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005064:	f000 b978 	b.w	8005358 <__malloc_unlock>
 8005068:	42a3      	cmp	r3, r4
 800506a:	d908      	bls.n	800507e <_free_r+0x46>
 800506c:	6825      	ldr	r5, [r4, #0]
 800506e:	1961      	adds	r1, r4, r5
 8005070:	428b      	cmp	r3, r1
 8005072:	bf01      	itttt	eq
 8005074:	6819      	ldreq	r1, [r3, #0]
 8005076:	685b      	ldreq	r3, [r3, #4]
 8005078:	1949      	addeq	r1, r1, r5
 800507a:	6021      	streq	r1, [r4, #0]
 800507c:	e7ed      	b.n	800505a <_free_r+0x22>
 800507e:	461a      	mov	r2, r3
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	b10b      	cbz	r3, 8005088 <_free_r+0x50>
 8005084:	42a3      	cmp	r3, r4
 8005086:	d9fa      	bls.n	800507e <_free_r+0x46>
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	1855      	adds	r5, r2, r1
 800508c:	42a5      	cmp	r5, r4
 800508e:	d10b      	bne.n	80050a8 <_free_r+0x70>
 8005090:	6824      	ldr	r4, [r4, #0]
 8005092:	4421      	add	r1, r4
 8005094:	1854      	adds	r4, r2, r1
 8005096:	42a3      	cmp	r3, r4
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	d1e0      	bne.n	800505e <_free_r+0x26>
 800509c:	681c      	ldr	r4, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	6053      	str	r3, [r2, #4]
 80050a2:	4421      	add	r1, r4
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	e7da      	b.n	800505e <_free_r+0x26>
 80050a8:	d902      	bls.n	80050b0 <_free_r+0x78>
 80050aa:	230c      	movs	r3, #12
 80050ac:	6003      	str	r3, [r0, #0]
 80050ae:	e7d6      	b.n	800505e <_free_r+0x26>
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	1961      	adds	r1, r4, r5
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf04      	itt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	bf04      	itt	eq
 80050c0:	1949      	addeq	r1, r1, r5
 80050c2:	6021      	streq	r1, [r4, #0]
 80050c4:	6054      	str	r4, [r2, #4]
 80050c6:	e7ca      	b.n	800505e <_free_r+0x26>
 80050c8:	b003      	add	sp, #12
 80050ca:	bd30      	pop	{r4, r5, pc}
 80050cc:	20012e8c 	.word	0x20012e8c

080050d0 <sbrk_aligned>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4e0e      	ldr	r6, [pc, #56]	; (800510c <sbrk_aligned+0x3c>)
 80050d4:	460c      	mov	r4, r1
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	4605      	mov	r5, r0
 80050da:	b911      	cbnz	r1, 80050e2 <sbrk_aligned+0x12>
 80050dc:	f000 f88c 	bl	80051f8 <_sbrk_r>
 80050e0:	6030      	str	r0, [r6, #0]
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f887 	bl	80051f8 <_sbrk_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	d00a      	beq.n	8005104 <sbrk_aligned+0x34>
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d007      	beq.n	8005108 <sbrk_aligned+0x38>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f87c 	bl	80051f8 <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d101      	bne.n	8005108 <sbrk_aligned+0x38>
 8005104:	f04f 34ff 	mov.w	r4, #4294967295
 8005108:	4620      	mov	r0, r4
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	20012e90 	.word	0x20012e90

08005110 <_malloc_r>:
 8005110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005114:	1ccd      	adds	r5, r1, #3
 8005116:	f025 0503 	bic.w	r5, r5, #3
 800511a:	3508      	adds	r5, #8
 800511c:	2d0c      	cmp	r5, #12
 800511e:	bf38      	it	cc
 8005120:	250c      	movcc	r5, #12
 8005122:	2d00      	cmp	r5, #0
 8005124:	4607      	mov	r7, r0
 8005126:	db01      	blt.n	800512c <_malloc_r+0x1c>
 8005128:	42a9      	cmp	r1, r5
 800512a:	d905      	bls.n	8005138 <_malloc_r+0x28>
 800512c:	230c      	movs	r3, #12
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	2600      	movs	r6, #0
 8005132:	4630      	mov	r0, r6
 8005134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005138:	4e2e      	ldr	r6, [pc, #184]	; (80051f4 <_malloc_r+0xe4>)
 800513a:	f000 f907 	bl	800534c <__malloc_lock>
 800513e:	6833      	ldr	r3, [r6, #0]
 8005140:	461c      	mov	r4, r3
 8005142:	bb34      	cbnz	r4, 8005192 <_malloc_r+0x82>
 8005144:	4629      	mov	r1, r5
 8005146:	4638      	mov	r0, r7
 8005148:	f7ff ffc2 	bl	80050d0 <sbrk_aligned>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	4604      	mov	r4, r0
 8005150:	d14d      	bne.n	80051ee <_malloc_r+0xde>
 8005152:	6834      	ldr	r4, [r6, #0]
 8005154:	4626      	mov	r6, r4
 8005156:	2e00      	cmp	r6, #0
 8005158:	d140      	bne.n	80051dc <_malloc_r+0xcc>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	4631      	mov	r1, r6
 800515e:	4638      	mov	r0, r7
 8005160:	eb04 0803 	add.w	r8, r4, r3
 8005164:	f000 f848 	bl	80051f8 <_sbrk_r>
 8005168:	4580      	cmp	r8, r0
 800516a:	d13a      	bne.n	80051e2 <_malloc_r+0xd2>
 800516c:	6821      	ldr	r1, [r4, #0]
 800516e:	3503      	adds	r5, #3
 8005170:	1a6d      	subs	r5, r5, r1
 8005172:	f025 0503 	bic.w	r5, r5, #3
 8005176:	3508      	adds	r5, #8
 8005178:	2d0c      	cmp	r5, #12
 800517a:	bf38      	it	cc
 800517c:	250c      	movcc	r5, #12
 800517e:	4629      	mov	r1, r5
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ffa5 	bl	80050d0 <sbrk_aligned>
 8005186:	3001      	adds	r0, #1
 8005188:	d02b      	beq.n	80051e2 <_malloc_r+0xd2>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	442b      	add	r3, r5
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	e00e      	b.n	80051b0 <_malloc_r+0xa0>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	1b52      	subs	r2, r2, r5
 8005196:	d41e      	bmi.n	80051d6 <_malloc_r+0xc6>
 8005198:	2a0b      	cmp	r2, #11
 800519a:	d916      	bls.n	80051ca <_malloc_r+0xba>
 800519c:	1961      	adds	r1, r4, r5
 800519e:	42a3      	cmp	r3, r4
 80051a0:	6025      	str	r5, [r4, #0]
 80051a2:	bf18      	it	ne
 80051a4:	6059      	strne	r1, [r3, #4]
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	bf08      	it	eq
 80051aa:	6031      	streq	r1, [r6, #0]
 80051ac:	5162      	str	r2, [r4, r5]
 80051ae:	604b      	str	r3, [r1, #4]
 80051b0:	4638      	mov	r0, r7
 80051b2:	f104 060b 	add.w	r6, r4, #11
 80051b6:	f000 f8cf 	bl	8005358 <__malloc_unlock>
 80051ba:	f026 0607 	bic.w	r6, r6, #7
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	1af2      	subs	r2, r6, r3
 80051c2:	d0b6      	beq.n	8005132 <_malloc_r+0x22>
 80051c4:	1b9b      	subs	r3, r3, r6
 80051c6:	50a3      	str	r3, [r4, r2]
 80051c8:	e7b3      	b.n	8005132 <_malloc_r+0x22>
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	bf0c      	ite	eq
 80051d0:	6032      	streq	r2, [r6, #0]
 80051d2:	605a      	strne	r2, [r3, #4]
 80051d4:	e7ec      	b.n	80051b0 <_malloc_r+0xa0>
 80051d6:	4623      	mov	r3, r4
 80051d8:	6864      	ldr	r4, [r4, #4]
 80051da:	e7b2      	b.n	8005142 <_malloc_r+0x32>
 80051dc:	4634      	mov	r4, r6
 80051de:	6876      	ldr	r6, [r6, #4]
 80051e0:	e7b9      	b.n	8005156 <_malloc_r+0x46>
 80051e2:	230c      	movs	r3, #12
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	4638      	mov	r0, r7
 80051e8:	f000 f8b6 	bl	8005358 <__malloc_unlock>
 80051ec:	e7a1      	b.n	8005132 <_malloc_r+0x22>
 80051ee:	6025      	str	r5, [r4, #0]
 80051f0:	e7de      	b.n	80051b0 <_malloc_r+0xa0>
 80051f2:	bf00      	nop
 80051f4:	20012e8c 	.word	0x20012e8c

080051f8 <_sbrk_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d06      	ldr	r5, [pc, #24]	; (8005214 <_sbrk_r+0x1c>)
 80051fc:	2300      	movs	r3, #0
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	f000 f8c0 	bl	8005388 <_sbrk>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_sbrk_r+0x1a>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_sbrk_r+0x1a>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20012e94 	.word	0x20012e94

08005218 <__sread>:
 8005218:	b510      	push	{r4, lr}
 800521a:	460c      	mov	r4, r1
 800521c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005220:	f000 f8a0 	bl	8005364 <_read_r>
 8005224:	2800      	cmp	r0, #0
 8005226:	bfab      	itete	ge
 8005228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800522a:	89a3      	ldrhlt	r3, [r4, #12]
 800522c:	181b      	addge	r3, r3, r0
 800522e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005232:	bfac      	ite	ge
 8005234:	6563      	strge	r3, [r4, #84]	; 0x54
 8005236:	81a3      	strhlt	r3, [r4, #12]
 8005238:	bd10      	pop	{r4, pc}

0800523a <__swrite>:
 800523a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523e:	461f      	mov	r7, r3
 8005240:	898b      	ldrh	r3, [r1, #12]
 8005242:	05db      	lsls	r3, r3, #23
 8005244:	4605      	mov	r5, r0
 8005246:	460c      	mov	r4, r1
 8005248:	4616      	mov	r6, r2
 800524a:	d505      	bpl.n	8005258 <__swrite+0x1e>
 800524c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005250:	2302      	movs	r3, #2
 8005252:	2200      	movs	r2, #0
 8005254:	f000 f868 	bl	8005328 <_lseek_r>
 8005258:	89a3      	ldrh	r3, [r4, #12]
 800525a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800525e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	4632      	mov	r2, r6
 8005266:	463b      	mov	r3, r7
 8005268:	4628      	mov	r0, r5
 800526a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	f000 b817 	b.w	80052a0 <_write_r>

08005272 <__sseek>:
 8005272:	b510      	push	{r4, lr}
 8005274:	460c      	mov	r4, r1
 8005276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527a:	f000 f855 	bl	8005328 <_lseek_r>
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	bf15      	itete	ne
 8005284:	6560      	strne	r0, [r4, #84]	; 0x54
 8005286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800528a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800528e:	81a3      	strheq	r3, [r4, #12]
 8005290:	bf18      	it	ne
 8005292:	81a3      	strhne	r3, [r4, #12]
 8005294:	bd10      	pop	{r4, pc}

08005296 <__sclose>:
 8005296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529a:	f000 b813 	b.w	80052c4 <_close_r>
	...

080052a0 <_write_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d07      	ldr	r5, [pc, #28]	; (80052c0 <_write_r+0x20>)
 80052a4:	4604      	mov	r4, r0
 80052a6:	4608      	mov	r0, r1
 80052a8:	4611      	mov	r1, r2
 80052aa:	2200      	movs	r2, #0
 80052ac:	602a      	str	r2, [r5, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f7fb fd89 	bl	8000dc6 <_write>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_write_r+0x1e>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_write_r+0x1e>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	20012e94 	.word	0x20012e94

080052c4 <_close_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	; (80052e0 <_close_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fb fd95 	bl	8000dfe <_close>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_close_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_close_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20012e94 	.word	0x20012e94

080052e4 <_fstat_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	; (8005304 <_fstat_r+0x20>)
 80052e8:	2300      	movs	r3, #0
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	602b      	str	r3, [r5, #0]
 80052f2:	f7fb fd90 	bl	8000e16 <_fstat>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	d102      	bne.n	8005300 <_fstat_r+0x1c>
 80052fa:	682b      	ldr	r3, [r5, #0]
 80052fc:	b103      	cbz	r3, 8005300 <_fstat_r+0x1c>
 80052fe:	6023      	str	r3, [r4, #0]
 8005300:	bd38      	pop	{r3, r4, r5, pc}
 8005302:	bf00      	nop
 8005304:	20012e94 	.word	0x20012e94

08005308 <_isatty_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d06      	ldr	r5, [pc, #24]	; (8005324 <_isatty_r+0x1c>)
 800530c:	2300      	movs	r3, #0
 800530e:	4604      	mov	r4, r0
 8005310:	4608      	mov	r0, r1
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	f7fb fd8f 	bl	8000e36 <_isatty>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d102      	bne.n	8005322 <_isatty_r+0x1a>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	b103      	cbz	r3, 8005322 <_isatty_r+0x1a>
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	bd38      	pop	{r3, r4, r5, pc}
 8005324:	20012e94 	.word	0x20012e94

08005328 <_lseek_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d07      	ldr	r5, [pc, #28]	; (8005348 <_lseek_r+0x20>)
 800532c:	4604      	mov	r4, r0
 800532e:	4608      	mov	r0, r1
 8005330:	4611      	mov	r1, r2
 8005332:	2200      	movs	r2, #0
 8005334:	602a      	str	r2, [r5, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	f7fb fd88 	bl	8000e4c <_lseek>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d102      	bne.n	8005346 <_lseek_r+0x1e>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b103      	cbz	r3, 8005346 <_lseek_r+0x1e>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	20012e94 	.word	0x20012e94

0800534c <__malloc_lock>:
 800534c:	4801      	ldr	r0, [pc, #4]	; (8005354 <__malloc_lock+0x8>)
 800534e:	f7ff be0b 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8005352:	bf00      	nop
 8005354:	20012e88 	.word	0x20012e88

08005358 <__malloc_unlock>:
 8005358:	4801      	ldr	r0, [pc, #4]	; (8005360 <__malloc_unlock+0x8>)
 800535a:	f7ff be06 	b.w	8004f6a <__retarget_lock_release_recursive>
 800535e:	bf00      	nop
 8005360:	20012e88 	.word	0x20012e88

08005364 <_read_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d07      	ldr	r5, [pc, #28]	; (8005384 <_read_r+0x20>)
 8005368:	4604      	mov	r4, r0
 800536a:	4608      	mov	r0, r1
 800536c:	4611      	mov	r1, r2
 800536e:	2200      	movs	r2, #0
 8005370:	602a      	str	r2, [r5, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f7fb fd0a 	bl	8000d8c <_read>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_read_r+0x1e>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_read_r+0x1e>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20012e94 	.word	0x20012e94

08005388 <_sbrk>:
 8005388:	4a04      	ldr	r2, [pc, #16]	; (800539c <_sbrk+0x14>)
 800538a:	6811      	ldr	r1, [r2, #0]
 800538c:	4603      	mov	r3, r0
 800538e:	b909      	cbnz	r1, 8005394 <_sbrk+0xc>
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <_sbrk+0x18>)
 8005392:	6011      	str	r1, [r2, #0]
 8005394:	6810      	ldr	r0, [r2, #0]
 8005396:	4403      	add	r3, r0
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	4770      	bx	lr
 800539c:	20012e98 	.word	0x20012e98
 80053a0:	20012ea0 	.word	0x20012ea0

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
